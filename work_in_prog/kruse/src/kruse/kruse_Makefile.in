# $Id$

srcdir = @srcdir@
top_builddir =  @top_builddir@
abs_top_builddir = @abs_top_builddir@
top_srcdir = @top_srcdir@
abs_top_srcdir = @abs_top_srcdir@
subdir = bgq
builddir = @builddir@

CFLAGS = @CFLAGS@
DEPFLAGS = @DEPFLAGS@
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
DEFS = @DEFS@
OPTARGS = @OPTARGS@
SOPTARGS = @SOPTARGS@

AR = ar
RANLIB = @RANLIB@
CC = @CC@
CCDEP = @CCDEP@
CCLD = ${CC}
LINK = ${CCLD} ${CFLAGS} ${LDFLAGS} ${OPTARGS} -o $@
LEX = @LEX@
AUTOCONF = @AUTOCONF@
DEFS = @DEFS@

INCLUDES = @INCLUDES@
LDADD =
COMPILE = ${CC} $(DEFS) ${INCLUDES} ${CPPFLAGS} ${CFLAGS}

LIBRARIES = libbgq
libbgq_TARGETS = bgq_legacy bgq_workers.inc bgq_workers_double bgq_workers_float bgq_ReadWeyllayout.inc bgq_HoppingMatrixWorker.inc bgq_ComputeWeyl.inc bgq_stdreductions bgq_reduction.inc bgq_stdoperators bgq_operator.inc asm1 asm2 bgq_qpx bgq_gaugefield bgq_spinorfield bgq_comm bgq_utils bgq_field bgq_HoppingMatrix bgq_dispatch mypapi
libbgq_STARGETS = 

libbgq_OBJECTS = $(addsuffix .o, ${libbgq_TARGETS})
libbgq_SOBJECTS = $(addsuffix .o, ${libbgq_STARGETS})

# default rule

all: Makefile dep libbgq.a

# rules for debugging
debug all-debug: CFLAGS := $(CFLAGS) @DEBUG_FLAG@
debug all-debug: all

# rules for profiling information
profile all-profile: CFLAGS := $(filter-out -fomit-frame-pointer,${CFLAGS}) @PROFILE_FLAG@
profile all-profile: all


#include dep rules

-include $(addsuffix .d,${libbgq_TARGETS})

include ${top_srcdir}/Makefile.global

# rule to compile objects

${libbgq_OBJECTS}: %.o: ${srcdir}/%.c %.d Makefile
	$(COMPILE) ${OPTARGS} -c $<

${libbgq_SOBJECTS}: %.o: ${srcdir}/%.c %.d Makefile
	$(COMPILE) ${SOPTARGS} -c $<

# rule to make libbgq

libbgq.a: ${libbgq_OBJECTS} ${libbgq_SOBJECTS} Makefile
	@rm -f libbgq.a
	@${AR} cru libbgq.a ${libbgq_OBJECTS} ${libbgq_SOBJECTS}
	@$(RANLIB) libbgq.a
	@cp libbgq.a ../lib/libbgq.a

# rule to generate .d files

$(addsuffix .d, $(libbgq_TARGETS) ${libbgq_STARGETS}): %.d: ${srcdir}/%.c Makefile
	@ $(CCDEP) ${DEPFLAGS} ${CPPFLAGS} ${INCLUDES} ${DEFS} $< > $@

# rule to make dependencies

dep: ${addsuffix .d, ${libbgq_TARGETS} ${libbgq_STARGETS}}

# rules to clean

compile-clean: Makefile
	rm -f ${$(addsuffix _OBJECTS, ${LIBRARIES})} ${$(addsuffix _SOBJECTS, ${LIBRARIES})} *.d

clean: compile-clean 
	rm -f $(addsuffix .a, ${LIBRARIES})
	rm -f ../lib/libbgq.a

distclean: clean
	rm -f Makefile
  

disasm: Makefile  asm1.ds asm1.s asm1.as asm1.lst  asm2.ds asm2.s asm2.as asm2.lst

asm1.s: Makefile asm1.o
	if [ -e $@ ]; then cp -f $@ ${@}_; fi
	bgq-objdump -d asm1.o | perl -pe 's/^\s+\w+\:\s+[^\t]*\t(.*)$$/\1/' > $@

asm1.ds: Makefile asm1.o
	if [ -e $@ ]; then cp -f $@ ${@}_; fi
	bgq-objdump -dS asm1.o | perl -pe 's/^\s+\w+\:\s+[^\t]*\t(.*)$$/\1/' > $@

asm1.as: Makefile asm1.o
	if [ -e $@ ]; then cp -f $@ ${@}_; fi
	bgq-objdump -d asm1.o > $@

asm1.lst asm1.info: asm1.c asm1.o Makefile
	if [ -e asm1.lst ]; then cp -f asm1.lst asm1.lst_; fi
	if [ -e asm1.info ]; then cp -f asm1.info asm1.info_; fi
	$(COMPILE) ${OPTARGS} -o asm1.qo -qlistopt -qreport -qlist -qsource -qattr -qxref -qinfo=all -qinfo=nouni:noeff -qoptdebug -c $<  >asm1.info 2>&1


asm2.ds: Makefile asm2.o
	if [ -e $@ ]; then cp -f $@ ${@}_; fi
	bgq-objdump -dS asm2.o | perl -pe 's/^\s+\w+\:\s+[^\t]*\t(.*)$$/\1/' > $@

asm2.s: Makefile asm2.o
	if [ -e $@ ]; then cp -f $@ ${@}_; fi
	bgq-objdump -d asm2.o | perl -pe 's/^\s+\w+\:\s+[^\t]*\t(.*)$$/\1/' > $@

asm2.as: Makefile asm2.o
	if [ -e $@ ]; then cp -f $@ ${@}_; fi
	bgq-objdump -d asm2.o > $@

asm2.lst asm2.info: asm2.c asm2.o Makefile
	if [ -e asm2.lst ]; then cp -f asm2.lst asm2.lst_; fi
	if [ -e asm2.info ]; then cp -f asm2.info asm2.info_; fi
	$(COMPILE) ${OPTARGS} -o asm2.qo -qlistopt -qreport -qlist -qsource -qattr -qxref -qinfo=all -qinfo=noeff -qoptdebug -c $<  >asm2.info 2>&1


.PHONY: all dep clean compile-clean distclean profile all-profile debug all-debug disasm FORCE
