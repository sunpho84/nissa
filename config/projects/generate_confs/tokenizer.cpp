#line 2 "generate_confs/tokenizer.cpp"

#line 4 "generate_confs/tokenizer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE tokenizer_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via tokenizer_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void tokenizer_restart (FILE *input_file ,yyscan_t yyscanner );
void tokenizer__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE tokenizer__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void tokenizer__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void tokenizer__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void tokenizer_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void tokenizer_pop_buffer_state (yyscan_t yyscanner );

static void tokenizer_ensure_buffer_stack (yyscan_t yyscanner );
static void tokenizer__load_buffer_state (yyscan_t yyscanner );
static void tokenizer__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER tokenizer__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE tokenizer__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE tokenizer__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE tokenizer__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *tokenizer_alloc (yy_size_t ,yyscan_t yyscanner );
void *tokenizer_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void tokenizer_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer tokenizer__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        tokenizer_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            tokenizer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        tokenizer_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            tokenizer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define tokenizer_wrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 175
#define YY_END_OF_BUFFER 176
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[861] =
    {   0,
       39,   39,    0,    0,  176,  174,    9,    7,    7,  174,
      174,  164,  165,   12,   10,  163,   11,  174,   13,   39,
       16,  173,  173,  173,  173,   38,  173,  173,  173,  173,
      173,  173,   41,  173,  173,  173,  173,  173,  173,  173,
       45,  173,  173,  173,  173,   14,  166,  167,    6,    5,
        6,    6,    6,    9,    0,   15,  172,  172,  172,  172,
        0,    0,   38,    1,    8,   38,   39,   38,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  103,  104,  105,
      173,  173,  173,  173,  173,  173,   38,   38,  173,  173,
      173,  173,  106,  107,  108,  173,  173,  173,  173,  173,

      173,  173,  173,  173,  173,  173,  173,   42,   43,   44,
      173,  173,  173,  173,  173,  173,  173,  173,  173,   21,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  159,  160,  161,    3,    2,    0,
      172,  172,  172,  172,    8,   38,   38,  173,  173,  173,
      173,  173,   96,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,   72,  168,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  150,  173,

       94,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,   92,  173,  152,  173,  173,  173,  173,  173,  173,
      173,   46,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,   20,
        4,   36,   37,  172,  173,  173,  173,  173,  173,  173,
       59,   62,   48,  173,  173,  151,  173,  173,  173,  173,
      168,  173,  173,   87,   86,   22,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  169,  173,  173,  173,  173,

      173,   69,  173,  173,  173,   54,  173,  173,  173,  173,
      173,  173,  173,  173,   19,  173,  173,  173,  173,  173,
      173,  173,  173,   28,  173,  173,  173,  173,  173,  154,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
       79,  173,   89,   88,  173,  173,   17,  158,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  172,  173,   23,
      173,  173,   97,  173,  173,   57,  173,  173,  173,  173,
      173,  173,  173,  173,  173,   18,  173,  173,  173,  162,
      173,  169,  173,  173,  173,  173,   71,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,

      173,  173,  173,  173,  170,  173,  120,  173,   27,  173,
      173,  173,  101,  173,  173,  173,  173,  173,  173,   63,
      173,  173,  173,  173,  173,  173,  173,   78,  173,  173,
      173,   90,  173,  173,   53,   51,  173,  173,  173,  173,
      173,  173,  173,   98,   58,  173,  173,   35,  173,  173,
      173,   95,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  122,  170,  173,  100,  173,  173,  173,

      140,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      171,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,   47,  173,  173,  173,  173,  173,  173,  173,   50,
      173,  172,  172,  173,  173,  173,  173,  173,  173,  173,
       93,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,   74,   25,   52,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  129,  173,  173,   26,   91,
      173,  173,  173,  173,  173,  173,   67,   73,   24,  173,
      173,  171,  173,  173,  173,  173,   84,  173,  173,  173,

      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      172,  172,  173,  173,  173,  143,  173,  173,  144,   83,
      173,  173,  173,  173,  173,   99,   60,  173,  173,   40,
      173,  173,   30,  173,  173,   82,  173,  173,  173,  173,
      173,  173,  173,  126,  128,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  135,  173,   55,   66,  173,
      173,  173,  173,  173,  173,  173,  173,  173,   85,  173,
      173,  173,  173,  173,  153,  173,  173,  172,  172,  173,
      173,  173,  173,  173,  173,   65,  173,  173,  133,  173,
      145,  173,  173,  139,  173,  173,  173,  173,  173,  173,

      173,  173,  173,  173,  173,  173,  173,  173,  173,  116,
      155,  173,  141,   29,  173,  136,  173,  173,   80,  149,
      147,  146,  173,  173,  173,  173,  173,  124,  173,  173,
      172,  172,  138,  173,  156,  173,  173,   64,  173,   75,
      173,  173,  173,  173,  173,  127,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,   68,
      173,  173,  173,  173,  137,  173,  173,  173,  123,  172,
      172,  157,  173,  119,  173,   49,  134,   70,  173,  173,
      130,  173,  173,  173,  173,  125,  173,  173,  112,  173,
      117,  131,  173,  173,   77,  173,  173,  173,  173,  173,

      172,  172,  102,  121,  132,  173,  114,  173,  173,  173,
      173,  113,  173,  142,   76,  148,  173,  173,  173,  173,
      172,  172,  173,  173,  173,  173,  111,  173,   56,  173,
      173,   61,  172,  172,  173,  110,  173,  173,  118,   32,
      173,   34,  172,   81,  173,  173,  173,  172,  173,  109,
      173,  172,  173,  173,   33,  115,  173,  173,   31,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   16,   17,
       18,   19,   16,   16,   16,   16,   16,    1,    1,    1,
       20,    1,    1,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
        1,    1,    1,   47,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,    1,   76,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[77] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    1,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1,    3,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    1,    1
    } ;

static yyconst flex_int16_t yy_base[867] =
    {   0,
        0,    0,   74,   75,  133, 1808,  116, 1808, 1808,   74,
       57, 1808, 1808, 1808,   78, 1808,   87,   95,   73,  106,
     1808,  103,  147,   95,  120,  211,  111,  117,  116,  174,
        0,   59,  138,  184,  263,  208,   66,   75,  162,  275,
      323,  113,  320,  111,  230, 1808, 1808, 1808, 1808, 1808,
      102,   92,  113,   96,  102, 1808,    0,  154,  160,  196,
      247,  346,  374, 1808,    0,  378,  388,  398,    0,  199,
      211,  258,  231,  229,  221,  270,  242,    0,    0,    0,
      417,  234,  247,  266,  257,  321,  402,  406,  284,  282,
      287,  290,    0,    0,    0,  315,  319,  319,  357,  365,

      389,  372,  371,  376,  404,  412,  398,    0,    0,    0,
      400,  397,  416,  409,  410,  417,  415,  419,  428,  425,
      425,  441,  428,  447,  461,  464,  464,  450,  470,  459,
      458,  464,  466,  478,  473,  469,  484,  485,  480,  475,
      484,  477,  472,  520,  476,  501,  486,  499,  493,  512,
      513,  522,  511,  512,    0,    0,    0, 1808, 1808,  529,
        0,  532,  514,  529,    0,  543,  547,  529,  546,  545,
      548,  548,    0,  549,  564,  568,  552,  565,  568,  557,
      568,  565,  560,    0,  561,  576,  579,  559,  571,  579,
      574,  588,  580,  574,  571,  600,  597,  594,    0,  594,

        0,  609,  602,  618,  605,  609,  607,  612,  623,  610,
      629,  620,  618,  629,  622,  618,  617,  624,  641,  642,
      645,  644,  648,  658,  642,  654,  650,  662,  654,  658,
      670,    0,  660,    0,  666,  678,  667,  669,  682,  668,
      671,    0,  674,  679,  688,  670,  673,  689,  689,  695,
      701,  709,  718,  704,  714,  713,  709,  716,  735,    0,
     1808,    0,    0,  724,  734,  722,  732,  730,  744,  721,
        0,    0,    0,  744,  743,    0,  729,  739,  744,  739,
        0,  744,  741,    0,    0,    0,  742,  758,  741,  766,
      753,  770,  775,  763,  779,  766,  790,  772,  778,  793,

      794,  781,  779,  779,  826,    0,  801,  784,  796,  787,
      784,  790,  823,  831,    0,  820,  826,  832,  831,  841,
      852,  840,  846,    0,  849,  841,  858,  864,  849,    0,
      852,  865,  882,  883,  874,  890,  876,  882,  880,  898,
        0,  887,    0,    0,  885,  890,    0,    0,  899,  899,
      892,  886,  887,  885,  901,  895,  911,  896,  898,    0,
      904,  898,  902,  920,  935,    0,  921,  934,  934,  949,
      946,  947,  948,  946,  935,    0,  936,  942,  957,    0,
      939,    0,  941,  959,  945,  953,    0,  943,  962,  961,
      960,  958,  994,  953,  998,  956,  994,  991,  992,  988,

      995, 1010,  991,  989, 1009, 1011,    0,  998,    0, 1006,
      999, 1016,    0, 1002, 1002, 1006, 1008, 1028, 1029,    0,
     1030, 1030, 1032, 1040, 1051, 1054, 1052, 1047, 1062, 1061,
     1060,    0, 1048, 1043,    0,    0, 1054, 1065, 1061, 1054,
     1058, 1065, 1070,    0,    0, 1063, 1077, 1101, 1075, 1064,
     1067,    0, 1080, 1095, 1104, 1092, 1108, 1096, 1100, 1099,
     1118, 1121, 1114, 1119, 1104, 1123, 1112, 1110, 1121, 1122,
     1106, 1123, 1128, 1129, 1134, 1128, 1123, 1139, 1140, 1147,
     1157, 1146, 1153, 1168, 1171, 1162, 1155, 1172, 1163, 1173,
     1163, 1160, 1168,    0,    0, 1164,    0, 1165, 1160, 1171,

        0, 1182, 1173, 1174, 1172, 1178, 1188, 1192, 1197, 1198,
     1200, 1200, 1208, 1205, 1218, 1216, 1215, 1230, 1231, 1212,
     1233,    0, 1215, 1222, 1222, 1225, 1224, 1227, 1228,    0,
     1223, 1222, 1241, 1241, 1227, 1235, 1233, 1247, 1235, 1237,
        0, 1267, 1275, 1268, 1270, 1265, 1269, 1270, 1267, 1268,
     1275, 1265, 1286,    0,    0,    0, 1274, 1275, 1273, 1277,
     1278, 1289, 1280, 1283, 1286, 1286, 1289, 1294, 1291, 1284,
     1294, 1310, 1327, 1329, 1319,    0, 1314, 1337,    0,    0,
     1324, 1336, 1327, 1324, 1327, 1321,    0,    0,    0, 1340,
     1336,    0, 1331, 1345, 1331, 1339,    0, 1339, 1351, 1335,

     1342, 1345, 1353, 1355, 1355, 1362, 1346, 1364, 1371, 1379,
     1377, 1390, 1374, 1381, 1384,    0, 1390, 1379,    0,    0,
     1398, 1376, 1384, 1397, 1391,    0,    0, 1397, 1401,    0,
     1393, 1397,    0, 1405, 1406,    0, 1398, 1406, 1399, 1413,
     1406, 1420, 1417, 1409,    0, 1428, 1429, 1440, 1427, 1435,
     1433, 1453, 1450, 1451, 1438,    0, 1439,    0,    0, 1444,
     1445, 1441, 1453, 1458, 1460, 1457, 1458, 1453,    0, 1454,
     1449, 1456, 1459, 1468,    0, 1472, 1452, 1469, 1485, 1495,
     1487, 1498, 1502, 1489, 1485,    0, 1502, 1507,    0, 1498,
        0, 1496, 1514,    0, 1513, 1498, 1493, 1507, 1500, 1518,

     1498, 1508, 1509, 1504, 1508, 1516, 1514, 1518, 1515,    0,
        0, 1519,    0,    0, 1533,    0, 1548, 1544,    0,    0,
        0,    0, 1550, 1543, 1556, 1546, 1553,    0, 1550, 1564,
     1561, 1557,    0, 1567,    0, 1561, 1571,    0, 1560,    0,
     1562, 1552, 1562, 1559, 1567,    0, 1572, 1573, 1571, 1583,
     1575, 1578, 1575, 1593, 1593, 1597, 1603, 1604, 1607,    0,
     1607, 1618, 1610, 1616,    0, 1620, 1621, 1619,    0, 1615,
     1625,    0, 1627,    0, 1618,    0,    0,    0, 1614, 1619,
        0, 1609, 1618, 1628, 1635,    0, 1624, 1625,    0, 1627,
        0,    0, 1627, 1645,    0, 1660, 1667, 1657, 1665, 1661,

     1660, 1674,    0,    0,    0, 1664,    0, 1662, 1674, 1667,
     1674,    0, 1669,    0,    0,    0, 1673, 1671, 1672, 1681,
     1668, 1681, 1671, 1673, 1688, 1676,    0, 1688,    0, 1677,
     1683,    0, 1682, 1691, 1715,    0, 1710, 1707,    0,    0,
     1720,    0, 1715,    0, 1710, 1715, 1723, 1715, 1736,    0,
     1717, 1719, 1728, 1726,    0,    0, 1728, 1724,    0, 1808,
     1791, 1795,   82, 1797, 1799, 1803
    } ;

static yyconst flex_int16_t yy_def[867] =
    {   0,
      860,    1,  861,  861,  860,  860,  860,  860,  860,  862,
      863,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  862,  860,  865,  865,  865,  865,
      860,  860,  860,  860,  866,  860,  860,  860,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  860,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,

      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  860,  860,  860,
      865,  865,  865,  865,  866,  860,  860,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,

      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      860,  865,  865,  865,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,

      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  865,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,

      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  865,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,

      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  865,  865,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,

      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      865,  865,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  865,  865,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,

      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      865,  865,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  865,
      865,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,

      865,  865,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      865,  865,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  864,  865,  865,  864,  864,  864,  864,  864,  864,
      864,  865,  865,  864,  864,  864,  864,  865,  864,  864,
      864,  865,  864,  864,  865,  864,  864,  864,  864,    0,
      860,  860,  860,  860,  860,  860
    } ;

static yyconst flex_int16_t yy_nxt[1885] =
    {   0,
        6,    7,    8,    9,   10,   11,   10,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   20,   20,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   31,   43,   31,   44,   45,   46,    6,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   31,
       43,   31,   44,   45,   47,   48,   50,   50,   56,  107,
       56,   58,   64,   51,   51,   57,  128,   65,   52,   52,
       59,   61,   60,   62,   62,   62,   62,   54,   53,   53,

       61,  159,   62,   62,   62,   62,   56,  107,   56,   58,
       63,   63,   63,   63,  128,  129,  158,   54,   59,   66,
       60,   67,   67,   67,   67,   70,   53,   53,   71,   81,
       68,   96,  860,   82,   72,  154,   73,   99,   74,  860,
       83,  100,   97,  129,   84,   98,  147,  160,   85,  860,
      101,  148,   86,   70,  860,  860,   71,   81,   68,   96,
      102,   82,   72,  154,   73,   99,   74,   75,   83,  100,
       97,   76,   84,   98,  147,  160,   85,   77,  101,  148,
       86,  108,  109,  110,  860,  860,  130,  162,  102,  131,
       78,   79,   80,  860,  163,   75,  132,  103,  860,   76,

      860,  860,  133,  860,  111,   77,  104,  112,  113,  108,
      109,  110,  114,  105,  130,  162,  106,  131,   78,   79,
       80,   87,  163,   87,  132,  103,   88,   88,   88,   88,
      133,   89,  111,  164,  104,  112,  113,  860,  168,   90,
      114,  105,   91,  125,  106,  126,  155,  156,  157,  127,
      169,  172,   92,  173,   93,   94,   95,  860,  174,   89,
      860,  164,   63,   63,   63,   63,  168,   90,  177,  860,
       91,  125,  860,  126,  860,  860,  184,  127,  169,  172,
       92,  173,   93,   94,   95,  115,  174,  116,  117,  170,
      118,  185,  186,  171,  119,  187,  177,  120,  121,  134,

      122,  123,  124,  175,  184,  135,  190,  136,  191,  176,
      137,  192,  860,  115,  138,  116,  117,  170,  118,  185,
      186,  171,  119,  187,  193,  120,  121,  134,  122,  123,
      124,  175,  860,  135,  190,  136,  191,  176,  137,  192,
      149,  188,  138,  139,  150,  151,  194,  140,  152,  189,
      141,  142,  193,  195,  143,  144,  196,  145,  153,   61,
      146,   62,   62,   62,   62,  860,  860,  860,  149,  188,
      860,  139,  150,  151,  194,  140,  152,  189,  141,  142,
      860,  195,  143,  144,  196,  145,  153,  860,  146,   63,
       63,   63,   63,  166,  166,  166,  166,  197,   68,  198,

      860,   66,   68,   67,   67,   67,   67,  201,   87,  202,
       87,  203,   68,  167,  167,  167,  167,  167,  167,  167,
      167,   88,   88,   88,   88,  197,   68,  198,  199,  200,
       68,  204,  205,  206,  209,  201,  210,  202,  207,  203,
       68,  178,  212,  208,  213,  214,  215,  216,  179,  180,
      181,  182,  217,  218,  183,  211,  199,  200,  219,  204,
      205,  206,  209,  220,  210,  221,  207,  222,  223,  178,
      212,  208,  213,  214,  215,  216,  179,  180,  181,  182,
      217,  218,  183,  211,  224,  225,  219,  226,  227,  228,
      229,  220,  232,  221,  230,  222,  223,  231,  233,  234,

      235,  237,  236,  238,  239,  240,  242,  243,  244,  245,
      246,  249,  224,  225,  252,  226,  227,  228,  229,  241,
      232,  250,  230,  253,  254,  231,  233,  234,  235,  237,
      236,  238,  239,  240,  242,  243,  244,  245,  246,  249,
      247,  251,  252,  255,  256,  257,  259,  241,  248,  250,
      260,  253,  254,  258,  261,  262,  263,  264,  166,  166,
      166,  166,  167,  167,  167,  167,  265,   68,  247,  251,
      266,  255,  256,  257,  259,  269,  248,  267,  260,  270,
      268,  258,  261,  262,  263,  264,  271,  272,  273,  274,
      275,  276,  277,  278,  265,   68,  279,  280,  266,  281,

      282,  283,  284,  269,  285,  267,  286,  270,  268,  287,
      288,  289,  290,  291,  271,  272,  273,  274,  275,  276,
      277,  278,  292,  293,  279,  280,  295,  281,  282,  283,
      284,  296,  285,  297,  286,  294,  298,  287,  288,  289,
      290,  291,  299,  300,  301,  302,  303,  304,  305,  306,
      292,  293,  307,  309,  295,  310,  311,  312,  313,  296,
      308,  297,  314,  294,  298,  315,  316,  317,  318,  319,
      299,  300,  301,  302,  303,  304,  305,  306,  320,  321,
      307,  309,  322,  310,  311,  312,  313,  323,  308,  324,
      314,  325,  326,  315,  316,  317,  318,  319,  327,  328,

      329,  330,  331,  332,  333,  335,  320,  321,  336,  338,
      322,  337,  341,  339,  342,  323,  343,  324,  340,  325,
      326,  334,  344,  345,  346,  347,  327,  328,  329,  330,
      331,  332,  333,  335,  348,  352,  336,  338,  349,  337,
      341,  339,  342,  350,  343,  353,  340,  354,  355,  334,
      344,  345,  346,  347,  356,  357,  351,  358,  359,  360,
      361,  362,  348,  352,  363,  364,  349,  365,  366,  367,
      368,  350,  369,  353,  370,  354,  355,  371,  372,  373,
      374,  375,  356,  357,  351,  358,  359,  360,  361,  362,
      376,  377,  363,  364,  378,  365,  366,  367,  368,  379,

      369,  380,  370,  381,  382,  371,  372,  373,  374,  375,
      383,  384,  385,  386,  387,  388,  389,  390,  376,  377,
      860,  404,  378,  405,  406,  407,  408,  379,  409,  380,
      860,  381,  382,  860,  860,  860,  860,  860,  383,  384,
      385,  386,  387,  388,  389,  390,  391,  410,  392,  404,
      393,  405,  406,  407,  408,  411,  409,  394,  395,  396,
      412,  397,  398,  399,  400,  401,  413,  414,  402,  415,
      416,  403,  417,  418,  391,  410,  392,  419,  393,  420,
      421,  422,  425,  411,  426,  394,  395,  396,  412,  397,
      398,  399,  400,  401,  413,  414,  402,  415,  416,  403,

      417,  418,  423,  424,  427,  419,  428,  420,  421,  422,
      425,  429,  426,  430,  431,  432,  433,  434,  435,  436,
      437,  438,  439,  440,  441,  442,  443,  444,  445,  446,
      423,  424,  427,  447,  428,  448,  449,  450,  451,  429,
      452,  430,  431,  432,  433,  434,  435,  436,  437,  438,
      439,  440,  441,  442,  443,  444,  445,  446,  453,  454,
      455,  447,  456,  448,  449,  450,  451,  457,  452,  458,
      459,  460,  461,  462,  463,  464,  465,  466,  468,  467,
      469,  470,  471,  472,  473,  474,  453,  454,  455,  475,
      456,  476,  477,  480,  860,  457,  484,  458,  459,  460,

      461,  462,  463,  464,  465,  466,  468,  467,  469,  470,
      471,  472,  473,  474,  478,  488,  489,  475,  481,  476,
      477,  480,  482,  490,  484,  485,  483,  479,  486,  491,
      492,  493,  494,  495,  487,  496,  497,  498,  499,  500,
      501,  502,  478,  488,  489,  503,  481,  504,  505,  506,
      482,  490,  507,  485,  483,  479,  486,  491,  492,  493,
      494,  495,  487,  496,  497,  498,  499,  500,  501,  502,
      508,  509,  510,  503,  511,  504,  505,  506,  512,  513,
      507,  514,  516,  517,  518,  521,  515,  522,  523,  524,
      525,  526,  527,  528,  529,  519,  530,  520,  508,  509,

      510,  531,  511,  534,  535,  536,  512,  513,  537,  514,
      516,  517,  518,  521,  515,  522,  523,  524,  525,  526,
      527,  528,  529,  519,  530,  520,  532,  538,  539,  531,
      540,  534,  535,  536,  541,  542,  537,  543,  544,  533,
      545,  546,  547,  548,  549,  550,  551,  552,  553,  554,
      555,  556,  557,  558,  532,  538,  539,  559,  540,  560,
      561,  562,  541,  542,  563,  543,  544,  533,  545,  546,
      547,  548,  549,  550,  551,  552,  553,  554,  555,  556,
      557,  558,  564,  565,  566,  559,  567,  560,  561,  562,
      568,  569,  563,  570,  571,  572,  573,  574,  576,  577,

      578,  575,  579,  580,  581,  582,  583,  584,  585,  586,
      564,  565,  566,  587,  567,  588,  589,  590,  568,  569,
      591,  570,  571,  572,  573,  574,  576,  577,  578,  575,
      579,  580,  581,  582,  583,  584,  585,  586,  592,  593,
      594,  587,  595,  588,  589,  590,  596,  597,  591,  598,
      599,  600,  601,  602,  603,  604,  605,  606,  607,  608,
      609,  610,  611,  612,  613,  614,  592,  593,  594,  615,
      595,  616,  617,  618,  596,  597,  619,  598,  599,  600,
      601,  602,  603,  604,  605,  606,  607,  608,  609,  610,
      611,  612,  613,  614,  620,  621,  622,  615,  623,  616,

      617,  618,  624,  625,  619,  626,  627,  628,  629,  630,
      631,  632,  633,  634,  635,  636,  637,  638,  639,  640,
      641,  642,  620,  621,  622,  643,  623,  644,  645,  646,
      624,  625,  647,  626,  627,  628,  629,  630,  631,  632,
      633,  634,  635,  636,  637,  638,  639,  640,  641,  642,
      648,  649,  650,  643,  651,  644,  645,  646,  652,  653,
      647,  654,  655,  656,  657,  658,  659,  660,  661,  662,
      663,  664,  665,  666,  667,  668,  669,  670,  648,  649,
      650,  671,  651,  672,  673,  674,  652,  653,  675,  654,
      655,  656,  657,  658,  659,  660,  661,  662,  663,  664,

      665,  666,  667,  668,  669,  670,  676,  677,  678,  671,
      679,  672,  673,  674,  680,  681,  675,  682,  683,  684,
      685,  686,  687,  688,  689,  690,  691,  692,  693,  694,
      695,  696,  697,  698,  676,  677,  678,  699,  679,  700,
      701,  702,  680,  681,  703,  682,  683,  684,  685,  686,
      687,  688,  689,  690,  691,  692,  693,  694,  695,  696,
      697,  698,  704,  705,  706,  699,  707,  700,  701,  702,
      708,  709,  703,  710,  711,  712,  713,  714,  715,  716,
      717,  718,  719,  720,  721,  722,  723,  724,  725,  726,
      704,  705,  706,  727,  707,  728,  729,  730,  708,  709,

      731,  710,  711,  712,  713,  714,  715,  716,  717,  718,
      719,  720,  721,  722,  723,  724,  725,  726,  732,  733,
      734,  727,  735,  728,  729,  730,  736,  737,  731,  738,
      739,  740,  741,  742,  743,  744,  745,  746,  747,  748,
      749,  750,  751,  752,  753,  754,  732,  733,  734,  755,
      735,  756,  757,  758,  736,  737,  759,  738,  739,  740,
      741,  742,  743,  744,  745,  746,  747,  748,  749,  750,
      751,  752,  753,  754,  760,  761,  762,  755,  763,  756,
      757,  758,  764,  765,  759,  766,  767,  768,  769,  770,
      771,  772,  773,  774,  775,  776,  777,  778,  779,  780,

      781,  782,  760,  761,  762,  783,  763,  784,  785,  786,
      764,  765,  787,  766,  767,  768,  769,  770,  771,  772,
      773,  774,  775,  776,  777,  778,  779,  780,  781,  782,
      788,  789,  790,  783,  791,  784,  785,  786,  792,  793,
      787,  794,  795,  796,  797,  798,  799,  800,  801,  802,
      803,  804,  805,  806,  807,  808,  809,  810,  788,  789,
      790,  811,  791,  812,  813,  814,  792,  793,  815,  794,
      795,  796,  797,  798,  799,  800,  801,  802,  803,  804,
      805,  806,  807,  808,  809,  810,  816,  817,  818,  811,
      819,  812,  813,  814,  820,  821,  815,  822,  823,  824,

      825,  826,  827,  828,  829,  830,  831,  832,  833,  834,
      835,  836,  837,  838,  816,  817,  818,  839,  819,  840,
      841,  842,  820,  821,  843,  822,  823,  824,  825,  826,
      827,  828,  829,  830,  831,  832,  833,  834,  835,  836,
      837,  838,  844,  845,  846,  839,  847,  840,  841,  842,
      848,  849,  843,  850,  851,  852,  853,  854,  855,  856,
      857,  858,  859,  860,  860,  860,  860,  860,  860,  860,
      844,  845,  846,  860,  847,  860,  860,  860,  848,  849,
      860,  850,  851,  852,  853,  854,  855,  856,  857,  858,
      859,   49,   49,   49,   49,   55,   55,   55,   55,   69,

       69,  161,  161,  165,  860,  165,  165,    5,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860
    } ;

static yyconst flex_int16_t yy_chk[1885] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    4,   10,   32,
       10,   11,   19,    3,    4,  863,   37,   19,    3,    4,
       11,   15,   11,   15,   15,   15,   15,   54,    3,    4,

       17,   52,   17,   17,   17,   17,   55,   32,   55,   11,
       18,   18,   18,   18,   37,   38,   51,    7,   11,   20,
       11,   20,   20,   20,   20,   22,    3,    4,   22,   24,
       20,   27,    5,   24,   22,   44,   22,   28,   22,    0,
       25,   28,   27,   38,   25,   27,   42,   53,   25,    0,
       29,   42,   25,   22,    0,    0,   22,   24,   20,   27,
       29,   24,   22,   44,   22,   28,   22,   23,   25,   28,
       27,   23,   25,   27,   42,   53,   25,   23,   29,   42,
       25,   33,   33,   33,    0,    0,   39,   58,   29,   39,
       23,   23,   23,    0,   59,   23,   39,   30,    0,   23,

        0,    0,   39,    0,   34,   23,   30,   34,   34,   33,
       33,   33,   34,   30,   39,   58,   30,   39,   23,   23,
       23,   26,   59,   26,   39,   30,   26,   26,   26,   26,
       39,   26,   34,   60,   30,   34,   34,    0,   70,   26,
       34,   30,   26,   36,   30,   36,   45,   45,   45,   36,
       71,   73,   26,   74,   26,   26,   26,    0,   75,   26,
        0,   60,   61,   61,   61,   61,   70,   26,   77,    0,
       26,   36,    0,   36,    0,    0,   82,   36,   71,   73,
       26,   74,   26,   26,   26,   35,   75,   35,   35,   72,
       35,   83,   84,   72,   35,   85,   77,   35,   35,   40,

       35,   35,   35,   76,   82,   40,   89,   40,   90,   76,
       40,   91,    0,   35,   40,   35,   35,   72,   35,   83,
       84,   72,   35,   85,   92,   35,   35,   40,   35,   35,
       35,   76,    0,   40,   89,   40,   90,   76,   40,   91,
       43,   86,   40,   41,   43,   43,   96,   41,   43,   86,
       41,   41,   92,   97,   41,   41,   98,   41,   43,   62,
       41,   62,   62,   62,   62,    0,    0,    0,   43,   86,
        0,   41,   43,   43,   96,   41,   43,   86,   41,   41,
        0,   97,   41,   41,   98,   41,   43,    0,   41,   63,
       63,   63,   63,   66,   66,   66,   66,   99,   63,  100,

        0,   67,   66,   67,   67,   67,   67,  102,   68,  103,
       68,  104,   67,   68,   68,   68,   68,   87,   87,   87,
       87,   88,   88,   88,   88,   99,   63,  100,  101,  101,
       66,  105,  106,  107,  112,  102,  113,  103,  111,  104,
       67,   81,  114,  111,  115,  116,  117,  118,   81,   81,
       81,   81,  119,  120,   81,  113,  101,  101,  120,  105,
      106,  107,  112,  121,  113,  122,  111,  123,  123,   81,
      114,  111,  115,  116,  117,  118,   81,   81,   81,   81,
      119,  120,   81,  113,  124,  125,  120,  126,  127,  128,
      129,  121,  131,  122,  130,  123,  123,  130,  132,  133,

      134,  135,  134,  136,  137,  138,  139,  140,  141,  142,
      143,  145,  124,  125,  147,  126,  127,  128,  129,  138,
      131,  146,  130,  148,  149,  130,  132,  133,  134,  135,
      134,  136,  137,  138,  139,  140,  141,  142,  143,  145,
      144,  146,  147,  150,  151,  152,  153,  138,  144,  146,
      154,  148,  149,  152,  160,  162,  163,  164,  166,  166,
      166,  166,  167,  167,  167,  167,  168,  166,  144,  146,
      169,  150,  151,  152,  153,  171,  144,  170,  154,  172,
      170,  152,  160,  162,  163,  164,  174,  175,  176,  177,
      178,  179,  180,  181,  168,  166,  182,  183,  169,  185,

      186,  187,  188,  171,  189,  170,  190,  172,  170,  191,
      192,  193,  194,  195,  174,  175,  176,  177,  178,  179,
      180,  181,  196,  197,  182,  183,  198,  185,  186,  187,
      188,  200,  189,  202,  190,  197,  203,  191,  192,  193,
      194,  195,  204,  205,  206,  207,  208,  209,  210,  211,
      196,  197,  212,  213,  198,  214,  215,  216,  217,  200,
      212,  202,  218,  197,  203,  219,  220,  221,  222,  223,
      204,  205,  206,  207,  208,  209,  210,  211,  224,  225,
      212,  213,  226,  214,  215,  216,  217,  227,  212,  228,
      218,  229,  230,  219,  220,  221,  222,  223,  231,  233,

      235,  236,  237,  238,  239,  240,  224,  225,  241,  243,
      226,  241,  245,  244,  246,  227,  247,  228,  244,  229,
      230,  239,  248,  249,  250,  251,  231,  233,  235,  236,
      237,  238,  239,  240,  252,  254,  241,  243,  253,  241,
      245,  244,  246,  253,  247,  255,  244,  256,  257,  239,
      248,  249,  250,  251,  258,  259,  253,  264,  265,  266,
      267,  268,  252,  254,  269,  270,  253,  274,  275,  277,
      278,  253,  279,  255,  280,  256,  257,  282,  283,  287,
      288,  289,  258,  259,  253,  264,  265,  266,  267,  268,
      290,  291,  269,  270,  292,  274,  275,  277,  278,  293,

      279,  294,  280,  295,  296,  282,  283,  287,  288,  289,
      297,  298,  299,  300,  301,  302,  303,  304,  290,  291,
        0,  307,  292,  308,  309,  310,  311,  293,  312,  294,
        0,  295,  296,    0,    0,    0,    0,    0,  297,  298,
      299,  300,  301,  302,  303,  304,  305,  313,  305,  307,
      305,  308,  309,  310,  311,  314,  312,  305,  305,  305,
      316,  305,  305,  305,  305,  305,  317,  318,  305,  319,
      320,  305,  321,  322,  305,  313,  305,  323,  305,  325,
      326,  327,  329,  314,  331,  305,  305,  305,  316,  305,
      305,  305,  305,  305,  317,  318,  305,  319,  320,  305,

      321,  322,  328,  328,  332,  323,  333,  325,  326,  327,
      329,  334,  331,  335,  336,  337,  338,  339,  340,  342,
      345,  346,  349,  350,  351,  352,  353,  354,  355,  356,
      328,  328,  332,  357,  333,  358,  359,  361,  362,  334,
      363,  335,  336,  337,  338,  339,  340,  342,  345,  346,
      349,  350,  351,  352,  353,  354,  355,  356,  364,  365,
      367,  357,  368,  358,  359,  361,  362,  369,  363,  370,
      371,  372,  373,  374,  375,  377,  378,  379,  381,  379,
      383,  384,  385,  386,  388,  389,  364,  365,  367,  390,
      368,  391,  392,  394,    0,  369,  396,  370,  371,  372,

      373,  374,  375,  377,  378,  379,  381,  379,  383,  384,
      385,  386,  388,  389,  393,  398,  399,  390,  395,  391,
      392,  394,  395,  400,  396,  397,  395,  393,  397,  401,
      402,  403,  404,  405,  397,  406,  408,  410,  411,  412,
      414,  415,  393,  398,  399,  416,  395,  417,  418,  419,
      395,  400,  421,  397,  395,  393,  397,  401,  402,  403,
      404,  405,  397,  406,  408,  410,  411,  412,  414,  415,
      422,  423,  424,  416,  425,  417,  418,  419,  426,  427,
      421,  428,  429,  430,  431,  433,  428,  434,  437,  438,
      439,  440,  441,  442,  443,  431,  446,  431,  422,  423,

      424,  447,  425,  449,  450,  451,  426,  427,  453,  428,
      429,  430,  431,  433,  428,  434,  437,  438,  439,  440,
      441,  442,  443,  431,  446,  431,  448,  454,  455,  447,
      456,  449,  450,  451,  457,  458,  453,  459,  460,  448,
      461,  462,  463,  464,  465,  466,  467,  468,  469,  470,
      471,  472,  473,  474,  448,  454,  455,  475,  456,  476,
      477,  478,  457,  458,  479,  459,  460,  448,  461,  462,
      463,  464,  465,  466,  467,  468,  469,  470,  471,  472,
      473,  474,  480,  481,  482,  475,  483,  476,  477,  478,
      484,  485,  479,  486,  487,  488,  489,  490,  491,  492,

      493,  490,  496,  498,  499,  500,  502,  503,  504,  505,
      480,  481,  482,  506,  483,  507,  508,  509,  484,  485,
      510,  486,  487,  488,  489,  490,  491,  492,  493,  490,
      496,  498,  499,  500,  502,  503,  504,  505,  511,  512,
      513,  506,  514,  507,  508,  509,  515,  516,  510,  517,
      518,  519,  520,  521,  523,  524,  525,  526,  527,  528,
      529,  531,  532,  533,  534,  535,  511,  512,  513,  536,
      514,  537,  538,  539,  515,  516,  540,  517,  518,  519,
      520,  521,  523,  524,  525,  526,  527,  528,  529,  531,
      532,  533,  534,  535,  542,  543,  544,  536,  545,  537,

      538,  539,  546,  547,  540,  548,  549,  550,  551,  552,
      553,  557,  558,  559,  560,  561,  562,  563,  564,  565,
      566,  567,  542,  543,  544,  568,  545,  569,  570,  571,
      546,  547,  572,  548,  549,  550,  551,  552,  553,  557,
      558,  559,  560,  561,  562,  563,  564,  565,  566,  567,
      573,  574,  575,  568,  577,  569,  570,  571,  578,  581,
      572,  582,  583,  584,  585,  586,  590,  591,  593,  594,
      595,  596,  598,  599,  600,  601,  602,  603,  573,  574,
      575,  604,  577,  605,  606,  607,  578,  581,  608,  582,
      583,  584,  585,  586,  590,  591,  593,  594,  595,  596,

      598,  599,  600,  601,  602,  603,  609,  610,  611,  604,
      612,  605,  606,  607,  613,  614,  608,  615,  617,  618,
      621,  622,  623,  624,  625,  628,  629,  631,  632,  634,
      635,  637,  638,  639,  609,  610,  611,  640,  612,  641,
      642,  643,  613,  614,  644,  615,  617,  618,  621,  622,
      623,  624,  625,  628,  629,  631,  632,  634,  635,  637,
      638,  639,  646,  647,  648,  640,  649,  641,  642,  643,
      650,  651,  644,  652,  653,  654,  655,  657,  660,  661,
      662,  663,  664,  665,  666,  667,  668,  670,  671,  672,
      646,  647,  648,  673,  649,  674,  676,  677,  650,  651,

      678,  652,  653,  654,  655,  657,  660,  661,  662,  663,
      664,  665,  666,  667,  668,  670,  671,  672,  679,  680,
      681,  673,  682,  674,  676,  677,  683,  684,  678,  685,
      687,  688,  690,  692,  693,  695,  696,  697,  698,  699,
      700,  701,  702,  703,  704,  705,  679,  680,  681,  706,
      682,  707,  708,  709,  683,  684,  712,  685,  687,  688,
      690,  692,  693,  695,  696,  697,  698,  699,  700,  701,
      702,  703,  704,  705,  715,  717,  718,  706,  723,  707,
      708,  709,  724,  725,  712,  726,  727,  729,  730,  731,
      732,  734,  736,  737,  739,  741,  742,  743,  744,  745,

      747,  748,  715,  717,  718,  749,  723,  750,  751,  752,
      724,  725,  753,  726,  727,  729,  730,  731,  732,  734,
      736,  737,  739,  741,  742,  743,  744,  745,  747,  748,
      754,  755,  756,  749,  757,  750,  751,  752,  758,  759,
      753,  761,  762,  763,  764,  766,  767,  768,  770,  771,
      773,  775,  779,  780,  782,  783,  784,  785,  754,  755,
      756,  787,  757,  788,  790,  793,  758,  759,  794,  761,
      762,  763,  764,  766,  767,  768,  770,  771,  773,  775,
      779,  780,  782,  783,  784,  785,  796,  797,  798,  787,
      799,  788,  790,  793,  800,  801,  794,  802,  806,  808,

      809,  810,  811,  813,  817,  818,  819,  820,  821,  822,
      823,  824,  825,  826,  796,  797,  798,  828,  799,  830,
      831,  833,  800,  801,  834,  802,  806,  808,  809,  810,
      811,  813,  817,  818,  819,  820,  821,  822,  823,  824,
      825,  826,  835,  837,  838,  828,  841,  830,  831,  833,
      843,  845,  834,  846,  847,  848,  849,  851,  852,  853,
      854,  857,  858,    0,    0,    0,    0,    0,    0,    0,
      835,  837,  838,    0,  841,    0,    0,    0,  843,  845,
        0,  846,  847,  848,  849,  851,  852,  853,  854,  857,
      858,  861,  861,  861,  861,  862,  862,  862,  862,  864,

      864,  865,  865,  866,    0,  866,  866,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../projects/generate_confs/tokenizer.lpp"
/* define status to avoid c++ comment */

/* raw definitions */
/* more complicated */
/* comments */
/* header of tokenizer */
#line 38 "../../projects/generate_confs/tokenizer.lpp"
#include <stdio.h>
#include <string.h>
#include "nissa.hpp"
#include "generate_confs/driver.hpp"

#define YY_EXTRA_TYPE nissa::driver_t*

#define DEBUG_PRINTF(...) if(debug_lexer) master_printf(__VA_ARGS__)

#define YY_INPUT(buf,result,max_size)					\
   {									\
     int rc[2];								\
     if(nissa::rank==0)							\
       {								\
	 rc[0]=fscanf(yyextra->fin,"%c",buf);				\
	 rc[1]=feof(yyextra->fin);					\
       }								\
     MPI_Bcast(rc,2,MPI_INT,0,MPI_COMM_WORLD);				\
     if(rc[0]!=1||rc[1]) result=YY_NULL;				\
     else								\
       {								\
	 result=1;							\
	 MPI_Bcast(buf,1,MPI_CHAR,0,MPI_COMM_WORLD);			\
       }								\
   }

 /* handle locations */
#define YY_USER_ACTION yylloc->first_line=yylloc->last_line=yylineno; \
    yylloc->first_column=yycolumn;yylloc->last_column=yycolumn+yyleng-1; \
    yycolumn+=yyleng;

#include "parser.hpp"
   
   const int debug_lexer=0;
#line 1174 "generate_confs/tokenizer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int tokenizer_lex_init (yyscan_t* scanner);

int tokenizer_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int tokenizer_lex_destroy (yyscan_t yyscanner );

int tokenizer_get_debug (yyscan_t yyscanner );

void tokenizer_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE tokenizer_get_extra (yyscan_t yyscanner );

void tokenizer_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *tokenizer_get_in (yyscan_t yyscanner );

void tokenizer_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *tokenizer_get_out (yyscan_t yyscanner );

void tokenizer_set_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t tokenizer_get_leng (yyscan_t yyscanner );

char *tokenizer_get_text (yyscan_t yyscanner );

int tokenizer_get_lineno (yyscan_t yyscanner );

void tokenizer_set_lineno (int line_number ,yyscan_t yyscanner );

int tokenizer_get_column  (yyscan_t yyscanner );

void tokenizer_set_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * tokenizer_get_lval (yyscan_t yyscanner );

void tokenizer_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *tokenizer_get_lloc (yyscan_t yyscanner );
    
        void tokenizer_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int tokenizer_wrap (yyscan_t yyscanner );
#else
extern int tokenizer_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int tokenizer_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int tokenizer_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 74 "../../projects/generate_confs/tokenizer.lpp"

 /* ignoring rules */
#line 1421 "generate_confs/tokenizer.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			tokenizer_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				tokenizer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		tokenizer__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 861 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1808 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 76 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Entering c++-style comment\n");BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 77 "../../projects/generate_confs/tokenizer.lpp"
master_printf("warning: multiple comments opened at line: %d\n", yylineno);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 78 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Exiting c++-style comment\n");BEGIN(INITIAL);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 79 "../../projects/generate_confs/tokenizer.lpp"
crash("reached end of file while scanning comment");
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 80 "../../projects/generate_confs/tokenizer.lpp"
yycolumn=1;yylineno++;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 81 "../../projects/generate_confs/tokenizer.lpp"

	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 82 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Ignoring endline\n");yycolumn=1;yylineno++;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 83 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Ignoring single line comment: %s\n",yytext);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 84 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Ignoring spaces: \"%s\"\n",yytext);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 86 "../../projects/generate_confs/tokenizer.lpp"
return TK_PLUS;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 87 "../../projects/generate_confs/tokenizer.lpp"
return TK_MINUS;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 88 "../../projects/generate_confs/tokenizer.lpp"
return TK_TIMES;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 89 "../../projects/generate_confs/tokenizer.lpp"
return TK_DIV;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 90 "../../projects/generate_confs/tokenizer.lpp"
return TK_POW;
	YY_BREAK
/* quoted text */
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 93 "../../projects/generate_confs/tokenizer.lpp"
yylval->text=new std::string(yytext,1,strlen(yytext)-2);DEBUG_PRINTF("found string \"%s\", length=%d, copied: \"%s\"\n",yytext,(int)strlen(yytext),yylval->text->c_str()); return TK_QUOTED_TEXT;
	YY_BREAK
/* equal */
case 16:
YY_RULE_SETUP
#line 96 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found =\n");return '=';
	YY_BREAK
/* true/false */
case 17:
YY_RULE_SETUP
#line 99 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found True\n");yylval->int_numb=1;return TK_INT;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 100 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found False\n");yylval->int_numb=0;return TK_INT;
	YY_BREAK
/* yes/no/none */
case 19:
YY_RULE_SETUP
#line 103 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found None\n");return TK_NONE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 104 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Yes\n");return TK_YES;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 105 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found No\n");return TK_NO;
	YY_BREAK
/* each */
case 22:
YY_RULE_SETUP
#line 108 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Each\n");return TK_EACH;
	YY_BREAK
/* after */
case 23:
YY_RULE_SETUP
#line 111 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found After\n");return TK_AFTER;
	YY_BREAK
/* residue */
case 24:
YY_RULE_SETUP
#line 114 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Residue\n");return TK_RESIDUE;
	YY_BREAK
/* index of theory, ncopies and nhits */
case 25:
YY_RULE_SETUP
#line 117 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Itheory\n");return TK_ITHEORY;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 118 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found NCopies\n");return TK_NCOPIES;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 119 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found NHits\n");return TK_NHITS;
	YY_BREAK
/* path */
case 28:
YY_RULE_SETUP
#line 122 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Path\n");return TK_PATH;
	YY_BREAK
/* operator list */
case 29:
YY_RULE_SETUP
#line 125 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Operators\n");return TK_OPERATORS;
	YY_BREAK
/* rendens pars */
case 30:
YY_RULE_SETUP
#line 128 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found MaxOrder\n");return TK_MAX_ORDER;
	YY_BREAK
/* spinpol pars */
case 31:
YY_RULE_SETUP
#line 131 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found UseFermConfForGluons\n");return TK_USE_FERM_CONF_FOR_GLUONS;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 132 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found AdjointFlow\n");return TK_USE_ADJOINT_FLOW;
	YY_BREAK
/* meta commands */
case 33:
YY_RULE_SETUP
#line 135 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found #PrintScannedInput\n");return TK_META_PRINT_SCANNED_INPUT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 136 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found #PrintFullInput\n");return TK_META_PRINT_FULL_INPUT;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 137 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found #Print\n");return TK_META_PRINT;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 138 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found #End\n");return EOF;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 139 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found #Now\n");yylval->int_numb=time(0);return TK_INT;
	YY_BREAK
/* recognizing number */
case 38:
YY_RULE_SETUP
#line 142 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Double: %s\n",yytext);sscanf(yytext,"%lg",&yylval->double_numb);return TK_DOUBLE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 143 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Integer: %s\n",yytext);sscanf(yytext,"%d",&yylval->int_numb);return TK_INT;
	YY_BREAK
/* time and space */
case 40:
YY_RULE_SETUP
#line 146 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Geometry\n");return TK_GEOMETRY;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 147 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found L\n");return TK_L;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 148 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found LX\n");return TK_LX;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 149 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found LY\n");return TK_LY;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 150 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found LX\n");return TK_LZ;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 151 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found T\n");return TK_T;
	YY_BREAK
/* tag for the run */
case 46:
YY_RULE_SETUP
#line 154 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Tag\n");return TK_TAG;
	YY_BREAK
/* theory */
case 47:
YY_RULE_SETUP
#line 157 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Theory\n");return TK_THEORY;
	YY_BREAK
/* gauge action */
case 48:
YY_RULE_SETUP
#line 160 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Beta\n");return TK_BETA;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 161 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found GaugeAction\n");return TK_GAUGE_ACTION;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 162 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Wilson\n");return TK_WILSON;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 163 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found tlSym\n");return TK_TLSYM;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 164 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Iwasaki\n");return TK_IWASAKI;
	YY_BREAK
/* topo potential */
case 53:
YY_RULE_SETUP
#line 167 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Theta\n");return TK_THETA;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 168 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Meta\n");return TK_META;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 169 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Ordinary\n");return TK_ORDINARY;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 170 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found TopoPotential\n");return TK_TOPO_POTENTIAL;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 171 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Fount Coeff\n"); return TK_COEFF;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 172 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Width\n"); return TK_WIDTH;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 173 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Barr\n"); return TK_BARR;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 174 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found ForceOut\n"); return TK_FORCE_OUT;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 175 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found WellTempering\n"); return TK_WELL_TEMPERING;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 176 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Bend\n"); return TK_BEND;
	YY_BREAK
/* quark content */
case 63:
YY_RULE_SETUP
#line 179 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Quark\n");return TK_QUARK;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 180 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Degeneracy\n");return TK_DEGENERACY;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 181 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Discretiz\n");return TK_DISCRETIZ;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 182 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found RootStag\n");return TK_ROOT_STAG;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 183 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Overlap\n");return TK_OVERLAP;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 184 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found RootTMClov\n");return TK_ROOT_TM_CLOV;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 185 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Mass\n");return TK_MASS;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 186 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found MassOverlap\n");return TK_MASS_OVERLAP;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 187 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Kappa\n");return TK_KAPPA;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 188 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found cSW\n");return TK_CSW;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 189 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found RePotCh\n");return TK_RE_POT_CH;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 190 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found ImPotCh\n");return TK_IM_POT_CH;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 191 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found ElecCharge\n");return TK_ELEC_CHARGE;
	YY_BREAK
/* smooth method */
case 76:
YY_RULE_SETUP
#line 194 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found SmoothMethod\n");return TK_SMOOTH_METHOD;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 195 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found SpaceOrTime\n");return TK_SPACE_OR_TIME;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 196 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Space\n");return TK_SPACE;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 197 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Time\n");return TK_TIME;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 198 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found SpaceTime\n");return TK_SPACETIME;
	YY_BREAK
/* meas each nsmooth */
case 81:
YY_RULE_SETUP
#line 201 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found MeasEachNSmooth\n");return TK_MEAS_EACH_NSMOOTH;
	YY_BREAK
/* topo corr */
case 82:
YY_RULE_SETUP
#line 204 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found MeasCorr\n");return TK_MEAS_CORR;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 205 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found CorrPath\n");return TK_CORR_PATH;
	YY_BREAK
/* spatial or temporal */
case 84:
YY_RULE_SETUP
#line 208 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Spatial\n");return TK_SPATIAL;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 209 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Temporal\n");return TK_TEMPORAL;
	YY_BREAK
/* sizes for rectangles */
case 86:
YY_RULE_SETUP
#line 212 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Dmin\n");return TK_DMIN;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 213 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Dmax\n");return TK_DMAX;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 214 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Tmin\n");return TK_TMIN;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 215 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Tmax\n");return TK_TMAX;
	YY_BREAK
/* stout parameters */
case 90:
YY_RULE_SETUP
#line 218 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Stout\n");return TK_STOUT;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 219 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found NLevels\n");return TK_NLEVELS;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 220 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Rho\n");return TK_RHO;
	YY_BREAK
/* cooling parameters */
case 93:
YY_RULE_SETUP
#line 223 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Cooling\n");return TK_COOLING;
	YY_BREAK
/* hyp parameters */
case 94:
YY_RULE_SETUP
#line 226 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Hyp\n");return TK_HYP;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 227 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Alphas\n");return TK_ALPHAS;
	YY_BREAK
/* ape parameters */
case 96:
YY_RULE_SETUP
#line 230 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Ape\n");return TK_APE;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 231 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Alpha\n");return TK_ALPHA;
	YY_BREAK
/* Wflow parameters */
case 98:
YY_RULE_SETUP
#line 234 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found WFlow\n");return TK_WFLOW;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 235 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found FlowStep\n");return TK_FLOW_STEP;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 236 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found NFlows\n");return TK_NFLOWS;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 237 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found NRecu\n");return TK_NRECU;
	YY_BREAK
/* background field parameters */
case 102:
YY_RULE_SETUP
#line 240 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found BkgrdEMField\n");return TK_BKGRD_EM_FIELD;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 241 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Bx\n");yylval->int_numb=0;return TK_B_COMP;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 242 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found By\n");yylval->int_numb=1;return TK_B_COMP;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 243 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Bz\n");yylval->int_numb=2;return TK_B_COMP;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 244 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Ex\n");yylval->int_numb=0;return TK_E_COMP;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 245 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Ey\n");yylval->int_numb=1;return TK_E_COMP;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 246 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Ez\n");yylval->int_numb=2;return TK_E_COMP;
	YY_BREAK
/* fermionic measures */
case 109:
YY_RULE_SETUP
#line 249 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found MeasNucleonCorrs\n");return TK_MEAS_NUCLEON_CORRS;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 250 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found MeasMesonCorrs\n");return TK_MEAS_MESON_CORRS;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 251 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found MeasPutpourri\n");return TK_MEAS_PUTPOURRI;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 252 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found MeasRendens\n");return TK_MEAS_RENDENS;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 253 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found MeasQedCorrs\n");return TK_MEAS_QED_CORRS;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 254 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found MeasMagnetiz\n");return TK_MEAS_MAGNETIZ;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 255 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found MeasMinMaxEigenval\n");return TK_MEAS_MIN_MAX_EIGENVAL;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 256 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found MeasZumba\n");return TK_MEAS_ZUMBA;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 257 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found MeasSpinPol\n");return TK_MEAS_SPINPOL;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 258 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found MeasSpectrProj\n");return TK_SPECTR_PROJ;
	YY_BREAK
/* parameters for PutPourri */
case 119:
YY_RULE_SETUP
#line 261 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found ComputeSusc\n");return TK_COMPUTE_SUSC;
	YY_BREAK
/* parameters for SpectrProj */
case 120:
YY_RULE_SETUP
#line 264 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Neigs\n");return TK_NEIGS;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 265 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found EigPrecision\n");return TK_EIG_PRECISION;
	YY_BREAK
/* parameters for MinmaxEigenvalues */
case 122:
YY_RULE_SETUP
#line 268 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found MinMax\n"); return TK_MIN_MAX;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 269 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found WSpaceSize\n");return TK_WSPACE_SIZE;
	YY_BREAK
/* gauge measures */
case 124:
YY_RULE_SETUP
#line 272 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found UseSmooth\n");return TK_USE_SMOOTH;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 273 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found MeasPlaqPol\n");return TK_MEAS_PLAQ_POL;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 274 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found MeasPlaq\n");return TK_MEAS_PLAQ;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 275 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found MeasEnergy\n");return TK_MEAS_ENERGY;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 276 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found MeasPoly\n");return TK_MEAS_POLY;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 277 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found MeasTop\n");return TK_MEAS_TOP;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 278 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found MeasLuppoli\n");return TK_MEAS_LUPPOLI;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 279 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found MeasWatusso\n");return TK_MEAS_WATUSSO;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 280 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found MeasAllRects\n");return TK_MEAS_ALL_RECTS;
	YY_BREAK
/* evol pars */
case 133:
YY_RULE_SETUP
#line 283 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Evolution\n");return TK_EVOLUTION;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 284 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found IdSeaTheoryn");return TK_ID_SEA_THEORY;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 285 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found NTrajTot\n");return TK_NTRAJ_TOT;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 286 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found SkipMetro\n");return TK_SKIP_METRO;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 287 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found TrajLength\n");return TK_TRAJ_LENGTH;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 288 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found ActResidue\n");return TK_ACT_RESIDUE;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 289 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found MdResidue\n");return TK_MD_RESIDUE;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 290 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found NSteps\n");return TK_NSTEPS;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 291 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found NSubsteps\n");return TK_NSUBSTEPS;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 292 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found NPseudoFerms\n");return TK_NPSEUDO_FERMS;
	YY_BREAK
/* analysis pars */
case 143:
YY_RULE_SETUP
#line 295 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Analysis\n");return TK_ANALYSIS;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 296 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found ConfList\n");return TK_CONF_LIST;
	YY_BREAK
/* gauge conf pars */
case 145:
YY_RULE_SETUP
#line 299 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found GaugeConf\n");return TK_GAUGE_CONF;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 300 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found StorePath\n");return TK_STORE_PATH;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 301 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found StoreEach\n");return TK_STORE_EACH;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 302 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found StoreRunning\n");return TK_STORE_RUNNING;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 303 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found StartCond\n");return TK_START_COND;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 304 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found HOT\n");return TK_HOT;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 305 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found COLD\n");return TK_COLD;
	YY_BREAK
/* run pars */
case 152:
YY_RULE_SETUP
#line 308 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Run\n");return TK_RUN;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 309 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Walltime\n");return TK_WALLTIME;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 310 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Seed\n");return TK_SEED;
	YY_BREAK
/* noise type */
case 155:
YY_RULE_SETUP
#line 313 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found NoiseType\n");return TK_NOISE_TYPE;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 314 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found AllPlusOne\n");yylval->rnd_type=nissa::RND_ALL_PLUS_ONE;return TK_RND_T;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 315 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found AllMinusOne\n");yylval->rnd_type=nissa::RND_ALL_MINUS_ONE;return TK_RND_T;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 316 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Unif\n");yylval->rnd_type=nissa::RND_UNIF;return TK_RND_T;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 317 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Z2\n");yylval->rnd_type=nissa::RND_Z2;return TK_RND_T;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 318 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Z3\n");yylval->rnd_type=nissa::RND_Z3;return TK_RND_T;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 319 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Z4\n");yylval->rnd_type=nissa::RND_Z4;return TK_RND_T;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 320 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Gauss\n");yylval->rnd_type=nissa::RND_GAUSS;return TK_RND_T;
	YY_BREAK
/* punctuation */
case 163:
YY_RULE_SETUP
#line 323 "../../projects/generate_confs/tokenizer.lpp"
return ',';
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 324 "../../projects/generate_confs/tokenizer.lpp"
return '(';
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 325 "../../projects/generate_confs/tokenizer.lpp"
return ')';
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 326 "../../projects/generate_confs/tokenizer.lpp"
return '{';
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 327 "../../projects/generate_confs/tokenizer.lpp"
return '}';
	YY_BREAK
/* quantities */
case 168:
YY_RULE_SETUP
#line 330 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Day(s)\n");yylval->int_numb=24*60*60;return TK_QUANTITY;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 331 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Hour(s)\n");yylval->int_numb=60*60;return TK_QUANTITY;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 332 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Minute(s)\n");yylval->int_numb=60;return TK_QUANTITY;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 333 "../../projects/generate_confs/tokenizer.lpp"
DEBUG_PRINTF("Found Second(s)\n");yylval->int_numb=1;return TK_QUANTITY;
	YY_BREAK
/* crash if finds unexpected word or unrecognized char */
case 172:
YY_RULE_SETUP
#line 336 "../../projects/generate_confs/tokenizer.lpp"
crash("found unexpected preprocessor directive %s",yytext);
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 337 "../../projects/generate_confs/tokenizer.lpp"
master_printf("Found invalid string \"%s\"\n",yytext);return TK_INVALID_STRING;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 338 "../../projects/generate_confs/tokenizer.lpp"
master_printf("Found invalid character \'%c\'\n",yytext[0]);return TK_INVALID_CHAR;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 340 "../../projects/generate_confs/tokenizer.lpp"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2430 "generate_confs/tokenizer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * tokenizer_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( tokenizer_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of tokenizer_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					tokenizer_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			tokenizer_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) tokenizer_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 861 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 861 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 860);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					tokenizer_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( tokenizer_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void tokenizer_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        tokenizer_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            tokenizer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	tokenizer__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	tokenizer__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void tokenizer__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		tokenizer_pop_buffer_state();
	 *		tokenizer_push_buffer_state(new_buffer);
     */
	tokenizer_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	tokenizer__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (tokenizer_wrap()) processing, but the only time this flag
	 * is looked at is after tokenizer_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void tokenizer__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE tokenizer__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) tokenizer_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in tokenizer__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) tokenizer_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in tokenizer__create_buffer()" );

	b->yy_is_our_buffer = 1;

	tokenizer__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with tokenizer__create_buffer()
 * @param yyscanner The scanner object.
 */
    void tokenizer__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		tokenizer_free((void *) b->yy_ch_buf ,yyscanner );

	tokenizer_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a tokenizer_restart() or at EOF.
 */
    static void tokenizer__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	tokenizer__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then tokenizer__init_buffer was _probably_
     * called from tokenizer_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void tokenizer__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		tokenizer__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void tokenizer_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	tokenizer_ensure_buffer_stack(yyscanner);

	/* This block is copied from tokenizer__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from tokenizer__switch_to_buffer. */
	tokenizer__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void tokenizer_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	tokenizer__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		tokenizer__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void tokenizer_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)tokenizer_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in tokenizer_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)tokenizer_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in tokenizer_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE tokenizer__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) tokenizer_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in tokenizer__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	tokenizer__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to tokenizer_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       tokenizer__scan_bytes() instead.
 */
YY_BUFFER_STATE tokenizer__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return tokenizer__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to tokenizer_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE tokenizer__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) tokenizer_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in tokenizer__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = tokenizer__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in tokenizer__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE tokenizer_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int tokenizer_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int tokenizer_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *tokenizer_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *tokenizer_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t tokenizer_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *tokenizer_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void tokenizer_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void tokenizer_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "tokenizer_set_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void tokenizer_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "tokenizer_set_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see tokenizer__switch_to_buffer
 */
void tokenizer_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void tokenizer_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int tokenizer_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void tokenizer_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * tokenizer_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void tokenizer_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *tokenizer_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void tokenizer_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* tokenizer_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int tokenizer_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) tokenizer_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* tokenizer_lex_init_extra has the same functionality as tokenizer_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to tokenizer_alloc in
 * the yyextra field.
 */

int tokenizer_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    tokenizer_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) tokenizer_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    tokenizer_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from tokenizer_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * tokenizer_lex_init()
     */
    return 0;
}

/* tokenizer_lex_destroy is for both reentrant and non-reentrant scanners. */
int tokenizer_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		tokenizer__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		tokenizer_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	tokenizer_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        tokenizer_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * tokenizer_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    tokenizer_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *tokenizer_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *tokenizer_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void tokenizer_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see tokenizer_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 340 "../../projects/generate_confs/tokenizer.lpp"



//initializator
nissa::driver_t::driver_t(FILE *ext) :
                        tag(def_tag()),
                        LX(def_L()),
                        LY(def_L()),
                        LZ(def_L()),
			T(def_T()),
			walltime(def_walltime()),
			seed(def_seed()),
			run_mode(def_run_mode()){
  fin=ext;
  
  init_scanner();
}

//initialize the scanner
void nissa::driver_t::init_scanner()
{
    tokenizer_lex_init(&scanner);
    tokenizer_set_extra(this,scanner);
}

//destroy the scanner
void nissa::driver_t::destroy_scanner()
{
    tokenizer_lex_destroy(scanner);
}

