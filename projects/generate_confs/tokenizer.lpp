%option case-insensitive
%option nounput
%option noyywrap
%option prefix="parser_"
%option outfile="tokenizer.cpp"
%option reentrant
%option bison-bridge
%option bison-locations

 /* define status to avoid c++ comment */
%x COMMENT

 /* raw definitions */
DIGIT [0-9]
LETTER [a-z]
ALNUM [a-z0-9_]
SPACE [[:blank:]]
SIGN \+|\-
QUOTE \"|\'
ANY .
NEWLINE \n|\r
DOT \.

 /* more complicated */
WORD {LETTER}*
DOUBLE {SIGN}?({DIGIT}*{DOT}{DIGIT}+)|({DIGIT}+{DOT}{DIGIT}*)
INT {DIGIT}*
MANTISSA e({SIGN}?{INT})
SCI_DOUBLE ({DOUBLE}|{INT}){MANTISSA}

 /* comments */
C_COMM_BEG \/\/
C_COMM {C_COMM_BEG}{ANY}*
CPP_COMM_BEG \/\*
CPP_COMM_END \*\/
CPP_COMM {CPP_COMM_BEG}(({ANY}-a)|{NEWLINE})*{CPP_COMM_END}

/* header of tokenizer */
%{
#include <stdio.h>
#include <string.h>
#include "nissa.hpp"
#include "driver.hpp"

#define YY_EXTRA_TYPE nissa::driver_t*

#define DEBUG_PRINTF(...) if(debug_lexer) master_printf(__VA_ARGS__)

#define YY_INPUT(buf,result,max_size)					\
   {									\
     int rc[2];								\
     if(nissa::rank==0)							\
       {								\
	 rc[0]=fscanf(yyextra->fin,"%c",buf);				\
	 rc[1]=feof(yyextra->fin);					\
       }								\
     MPI_Bcast(rc,2,MPI_INT,0,MPI_COMM_WORLD);				\
     if(rc[0]!=1||rc[1]) result=YY_NULL;				\
     else								\
       {								\
	 result=1;							\
	 MPI_Bcast(buf,1,MPI_CHAR,0,MPI_COMM_WORLD);			\
       }								\
   }

 /* handle locations */
#define YY_USER_ACTION yylloc->first_line=yylloc->last_line=yylineno; \
    yylloc->first_column=yycolumn;yylloc->last_column=yycolumn+yyleng-1; \
    yycolumn+=yyleng;

#include "parser.hpp"
   
   const int debug_lexer=0;
%}

%%
 /* ignoring rules */
"/*"                                DEBUG_PRINTF("Entering c++-style comment\n");BEGIN(COMMENT);
<COMMENT>"/*"                       master_printf("warning: multiple comments opened at line: %d\n", yylineno);
<COMMENT>"*/"                       DEBUG_PRINTF("Exiting c++-style comment\n");BEGIN(INITIAL);
<COMMENT>"EOF"                      crash("reached end of file while scanning comment");
<COMMENT>"\n"                       yycolumn=1;yylineno++;
<COMMENT>{ANY}
{NEWLINE}                           DEBUG_PRINTF("Ignoring endline\n");yycolumn=1;yylineno++;
{C_COMM}                            DEBUG_PRINTF("Ignoring single line comment: %s\n",yytext);
{SPACE}+                            DEBUG_PRINTF("Ignoring spaces: \"%s\"\n",yytext);

\+ return TK_PLUS;
\- return TK_MINUS;
\* return TK_TIMES;
\/ return TK_DIV;
\^ return TK_POW;

 /* quoted text */
{QUOTE}[^\"\']*{QUOTE} yylval->text=new std::string(yytext,1,strlen(yytext)-2);DEBUG_PRINTF("found string \"%s\", length=%d, copied: \"%s\"\n",yytext,(int)strlen(yytext),yylval->text->c_str()); return TK_QUOTED_TEXT;

 /* equal */
\= DEBUG_PRINTF("Found =\n");return '=';

 /* true/false */
True DEBUG_PRINTF("Found True\n");yylval->int_numb=1;return TK_INT;
False DEBUG_PRINTF("Found False\n");yylval->int_numb=0;return TK_INT;

 /* yes/no/none */
None DEBUG_PRINTF("Found None\n");return TK_NONE;
Yes DEBUG_PRINTF("Found Yes\n");return TK_YES;
No DEBUG_PRINTF("Found No\n");return TK_NO;

 /* each */
Each DEBUG_PRINTF("Found Each\n");return TK_EACH;

 /* after */
After DEBUG_PRINTF("Found After\n");return TK_AFTER;

 /* residue */
Residue DEBUG_PRINTF("Found Residue\n");return TK_RESIDUE;

 /* index of theory, ncopies and nhits */
Itheory DEBUG_PRINTF("Found Itheory\n");return TK_ITHEORY;
NCopies DEBUG_PRINTF("Found NCopies\n");return TK_NCOPIES;
NHits DEBUG_PRINTF("Found NHits\n");return TK_NHITS;

 /* path */
Path DEBUG_PRINTF("Found Path\n");return TK_PATH;

 /* operator list */
Operators DEBUG_PRINTF("Found Operators\n");return TK_OPERATORS;

 /* rendens pars */
MaxOrder DEBUG_PRINTF("Found MaxOrder\n");return TK_MAX_ORDER;

 /* spinpol pars */
UseFermConfForGluons DEBUG_PRINTF("Found UseFermConfForGluons\n");return TK_USE_FERM_CONF_FOR_GLUONS;
UseAdjointFlow DEBUG_PRINTF("Found AdjointFlow\n");return TK_USE_ADJOINT_FLOW;

 /* meta commands */
\#PrintScannedInput DEBUG_PRINTF("Found #PrintScannedInput\n");return TK_META_PRINT_SCANNED_INPUT;
\#PrintFullInput DEBUG_PRINTF("Found #PrintFullInput\n");return TK_META_PRINT_FULL_INPUT;
\#Print DEBUG_PRINTF("Found #Print\n");return TK_META_PRINT;
\#End DEBUG_PRINTF("Found #End\n");return EOF;
\#Now DEBUG_PRINTF("Found #Now\n");yylval->int_numb=time(0);return TK_INT;

 /* recognizing number */
{SCI_DOUBLE}|{DOUBLE} DEBUG_PRINTF("Found Double: %s\n",yytext);sscanf(yytext,"%lg",&yylval->double_numb);return TK_DOUBLE;
{INT} DEBUG_PRINTF("Found Integer: %s\n",yytext);sscanf(yytext,"%d",&yylval->int_numb);return TK_INT;

 /* time and space */
Geometry  DEBUG_PRINTF("Found Geometry\n");return TK_GEOMETRY;
L DEBUG_PRINTF("Found L\n");return TK_L;
LX DEBUG_PRINTF("Found LX\n");return TK_LX;
LY DEBUG_PRINTF("Found LY\n");return TK_LY;
LZ DEBUG_PRINTF("Found LX\n");return TK_LZ;
T DEBUG_PRINTF("Found T\n");return TK_T;

 /* tag for the run */
Tag DEBUG_PRINTF("Found Tag\n");return TK_TAG;

 /* theory */
Theory DEBUG_PRINTF("Found Theory\n");return TK_THEORY;

 /* gauge action */
Beta DEBUG_PRINTF("Found Beta\n");return TK_BETA;
GaugeAction DEBUG_PRINTF("Found GaugeAction\n");return TK_GAUGE_ACTION;
Wilson DEBUG_PRINTF("Found Wilson\n");return TK_WILSON;
tlSym DEBUG_PRINTF("Found tlSym\n");return TK_TLSYM;
Iwasaki DEBUG_PRINTF("Found Iwasaki\n");return TK_IWASAKI;

 /* topo potential */
Theta DEBUG_PRINTF("Found Theta\n");return TK_THETA;
Meta DEBUG_PRINTF("Found Meta\n");return TK_META;
Ordinary DEBUG_PRINTF("Found Ordinary\n");return TK_ORDINARY;
TopoPotential DEBUG_PRINTF("Found TopoPotential\n");return TK_TOPO_POTENTIAL;
Coeff DEBUG_PRINTF("Fount Coeff\n"); return TK_COEFF;
Width DEBUG_PRINTF("Found Width\n"); return TK_WIDTH;
Barr DEBUG_PRINTF("Found Barr\n"); return TK_BARR;
ForceOut DEBUG_PRINTF("Found ForceOut\n"); return TK_FORCE_OUT;
WellTempering DEBUG_PRINTF("Found WellTempering\n"); return TK_WELL_TEMPERING;
Bend DEBUG_PRINTF("Found Bend\n"); return TK_BEND;

 /* quark content */
Quark DEBUG_PRINTF("Found Quark\n");return TK_QUARK;
Degeneracy DEBUG_PRINTF("Found Degeneracy\n");return TK_DEGENERACY;
Discretiz DEBUG_PRINTF("Found Discretiz\n");return TK_DISCRETIZ;
RootStag DEBUG_PRINTF("Found RootStag\n");return TK_ROOT_STAG;
RootTMClov DEBUG_PRINTF("Found RootTMClov\n");return TK_ROOT_TM_CLOV;
Mass DEBUG_PRINTF("Found Mass\n");return TK_MASS;
Kappa DEBUG_PRINTF("Found Kappa\n");return TK_KAPPA;
cSW DEBUG_PRINTF("Found cSW\n");return TK_CSW;
RePotCh  DEBUG_PRINTF("Found RePotCh\n");return TK_RE_POT_CH;
ImPotCh  DEBUG_PRINTF("Found ImPotCh\n");return TK_IM_POT_CH;
ElecCharge  DEBUG_PRINTF("Found ElecCharge\n");return TK_ELEC_CHARGE;

 /* smooth method */
SmoothMethod DEBUG_PRINTF("Found SmoothMethod\n");return TK_SMOOTH_METHOD;

 /* meas each nsmooth */
MeasEachNSmooth DEBUG_PRINTF("Found MeasEachNSmooth\n");return TK_MEAS_EACH_NSMOOTH;

 /* topo corr */
MeasCorr DEBUG_PRINTF("Found MeasCorr\n");return TK_MEAS_CORR;
CorrPath DEBUG_PRINTF("Found CorrPath\n");return TK_CORR_PATH;

 /* spatial or temporal */
Spatial DEBUG_PRINTF("Found Spatial\n");return TK_SPATIAL;
Temporal DEBUG_PRINTF("Found Temporal\n");return TK_TEMPORAL;

 /* sizes for rectangles */
Dmin DEBUG_PRINTF("Found Dmin\n");return TK_DMIN;
Dmax DEBUG_PRINTF("Found Dmax\n");return TK_DMAX;
Tmin DEBUG_PRINTF("Found Tmin\n");return TK_TMIN;
Tmax DEBUG_PRINTF("Found Tmax\n");return TK_TMAX;

 /* stout parameters */
Stout DEBUG_PRINTF("Found Stout\n");return TK_STOUT;
NLevels DEBUG_PRINTF("Found NLevels\n");return TK_NLEVELS;
Rho DEBUG_PRINTF("Found Rho\n");return TK_RHO;

 /* cooling parameters */
Cooling DEBUG_PRINTF("Found Cooling\n");return TK_COOLING;

 /* hyp parameters */
Hyp DEBUG_PRINTF("Found Hyp\n");return TK_HYP;
Alphas DEBUG_PRINTF("Found Alphas\n");return TK_ALPHAS;

 /* ape parameters */
Ape DEBUG_PRINTF("Found Ape\n");return TK_APE;
Alpha DEBUG_PRINTF("Found Alpha\n");return TK_ALPHA;

 /* Wflow parameters */
WFlow DEBUG_PRINTF("Found WFlow\n");return TK_WFLOW;
FlowStep DEBUG_PRINTF("Found FlowStep\n");return TK_FLOW_STEP;
NFlows DEBUG_PRINTF("Found NFlows\n");return TK_NFLOWS;
NRecu DEBUG_PRINTF("Found NRecu\n");return TK_NRECU;

 /* background field parameters */
BkgrdEMField DEBUG_PRINTF("Found BkgrdEMField\n");return TK_BKGRD_EM_FIELD;
Bx DEBUG_PRINTF("Found Bx\n");yylval->int_numb=0;return TK_B_COMP;
By DEBUG_PRINTF("Found By\n");yylval->int_numb=1;return TK_B_COMP;
Bz DEBUG_PRINTF("Found Bz\n");yylval->int_numb=2;return TK_B_COMP;
Ex DEBUG_PRINTF("Found Ex\n");yylval->int_numb=0;return TK_E_COMP;
Ey DEBUG_PRINTF("Found Ey\n");yylval->int_numb=1;return TK_E_COMP;
Ez DEBUG_PRINTF("Found Ez\n");yylval->int_numb=2;return TK_E_COMP;

 /* fermionic measures */
MeasNucleonCorrs DEBUG_PRINTF("Found MeasNucleonCorrs\n");return TK_MEAS_NUCLEON_CORRS;
MeasMesonCorrs DEBUG_PRINTF("Found MeasMesonCorrs\n");return TK_MEAS_MESON_CORRS;
MeasPutpourri DEBUG_PRINTF("Found MeasPutpourri\n");return TK_MEAS_PUTPOURRI;
MeasRendens DEBUG_PRINTF("Found MeasRendens\n");return TK_MEAS_RENDENS;
MeasQedCorrs DEBUG_PRINTF("Found MeasQedCorrs\n");return TK_MEAS_QED_CORRS;
MeasMagnetiz DEBUG_PRINTF("Found MeasMagnetiz\n");return TK_MEAS_MAGNETIZ;
MeasZumba DEBUG_PRINTF("Found MeasZumba\n");return TK_MEAS_ZUMBA;
MeasSpinPol DEBUG_PRINTF("Found MeasSpinPol\n");return TK_MEAS_SPINPOL;

 /* parameters for PutPourri */
ComputeSusc  DEBUG_PRINTF("Found ComputeSusc\n");return TK_COMPUTE_SUSC;

 /* gauge measures */
MeasPlaqPol DEBUG_PRINTF("Found MeasPlaqPol\n");return TK_MEAS_PLAQ_POL;
MeasTop DEBUG_PRINTF("Found MeasTop\n");return TK_MEAS_TOP;
MeasLuppoli DEBUG_PRINTF("Found MeasLuppoli\n");return TK_MEAS_LUPPOLI;
MeasWatusso DEBUG_PRINTF("Found MeasWatusso\n");return TK_MEAS_WATUSSO;
MeasAllRects DEBUG_PRINTF("Found MeasAllRects\n");return TK_MEAS_ALL_RECTS;

 /* evol pars */
Evolution DEBUG_PRINTF("Found Evolution\n");return TK_EVOLUTION;
IdSeaTheory DEBUG_PRINTF("Found IdSeaTheoryn");return TK_ID_SEA_THEORY;
NTrajTot DEBUG_PRINTF("Found NTrajTot\n");return TK_NTRAJ_TOT;
SkipMetro DEBUG_PRINTF("Found SkipMetro\n");return TK_SKIP_METRO;
TrajLength DEBUG_PRINTF("Found TrajLength\n");return TK_TRAJ_LENGTH;
ActResidue DEBUG_PRINTF("Found ActResidue\n");return TK_ACT_RESIDUE;
MdResidue DEBUG_PRINTF("Found MdResidue\n");return TK_MD_RESIDUE;
NSteps DEBUG_PRINTF("Found NSteps\n");return TK_NSTEPS;
NSubsteps DEBUG_PRINTF("Found NSubsteps\n");return TK_NSUBSTEPS;
NPseudoFerms DEBUG_PRINTF("Found NPseudoFerms\n");return TK_NPSEUDO_FERMS;

 /* analysis pars */
Analysis DEBUG_PRINTF("Found Analysis\n");return TK_ANALYSIS;
ConfList DEBUG_PRINTF("Found ConfList\n");return TK_CONF_LIST;

 /* gauge conf pars */
GaugeConf DEBUG_PRINTF("Found GaugeConf\n");return TK_GAUGE_CONF;
StorePath DEBUG_PRINTF("Found StorePath\n");return TK_STORE_PATH;
StoreEach DEBUG_PRINTF("Found StoreEach\n");return TK_STORE_EACH;
StoreRunning DEBUG_PRINTF("Found StoreRunning\n");return TK_STORE_RUNNING;
StartCond DEBUG_PRINTF("Found StartCond\n");return TK_START_COND;
HOT DEBUG_PRINTF("Found HOT\n");return TK_HOT;
COLD DEBUG_PRINTF("Found COLD\n");return TK_COLD;

 /* run pars */
Run DEBUG_PRINTF("Found Run\n");return TK_RUN;
Walltime DEBUG_PRINTF("Found Walltime\n");return TK_WALLTIME;
Seed DEBUG_PRINTF("Found Seed\n");return TK_SEED;

 /* punctuation */
\, return ',';
\( return '(';
\) return ')';
\{ return '{';
\} return '}';

 /* quantities */
Days? DEBUG_PRINTF("Found Day(s)\n");yylval->int_numb=24*60*60;return TK_QUANTITY;
Hours? DEBUG_PRINTF("Found Hour(s)\n");yylval->int_numb=60*60;return TK_QUANTITY;
Minute? DEBUG_PRINTF("Found Minute(s)\n");yylval->int_numb=60;return TK_QUANTITY;
Seconds? DEBUG_PRINTF("Found Second(s)\n");yylval->int_numb=1;return TK_QUANTITY;

 /* crash if finds unexpected word or unrecognized char */
\#{LETTER}{ALNUM}* crash("found unexpected preprocessor directive %s",yytext);
{LETTER}{ALNUM}* master_printf("Found invalid string \"%s\"\n",yytext);return TK_INVALID_STRING;
{ANY} master_printf("Found invalid character \'%c\'\n",yytext[0]);return TK_INVALID_CHAR;

%%

//initializator
nissa::driver_t::driver_t(FILE *ext) :
                        tag(def_tag()),
                        LX(def_L()),
                        LY(def_L()),
                        LZ(def_L()),
			T(def_T()),
			walltime(def_walltime()),
			seed(def_seed()),
			run_mode(def_run_mode()){
  fin=ext;
  
  init_scanner();
}

//initialize the scanner
void nissa::driver_t::init_scanner()
{
    yylex_init(&scanner);
    yyset_extra(this,scanner);
}

//destroy the scanner
void nissa::driver_t::destroy_scanner()
{
    yylex_destroy(scanner);
}
