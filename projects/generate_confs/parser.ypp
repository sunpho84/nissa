%define api.pure
%locations
%defines
%define parse.lac full
%define parse.error verbose
%parse-param {nissa::driver_t *driver}
%lex-param {void *scanner}

%{

#define YYDEBUG 1

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <glob.h>

#include "nissa.hpp"
#include "generate_confs/driver.hpp"
#include "generate_confs/parser.hpp"

  using namespace nissa;

  [[maybe_unused]]
  const int debug_parser=0;
  
  int tokenizer_lex(YYSTYPE *lvalp,YYLTYPE *llocp,void *scanner);
#define parser_lex tokenizer_lex

  void parser_error(YYLTYPE *locp,driver_t *driver,const char *err)
  {crash("exception at line %d columns [%d-%d] %s",locp->first_line,locp->first_column,locp->last_column,err);}

#define scanner driver->scanner
  %}

 //union used to catch all symbols
%union
{
    double double_numb;
    int int_numb;
    std::string *text;
    nissa::gauge_action_name_t gauge_action_name;
    nissa::em_field_pars_t *em_field_pars;
    nissa::topotential_pars_t *topotential_pars;
    nissa::theory_pars_t *theory;
    nissa::quark_content_t *quark;
    nissa::smooth_pars_t *smooth_pars;
    nissa::stout_pars_t *stout_pars;
    nissa::cool_pars_t *cool_pars;
    nissa::ape_pars_t *ape_pars;
    nissa::hyp_pars_t *hyp_pars;
    nissa::Wflow_pars_t *Wflow_pars;
    
    nissa::meson_corr_meas_pars_t *meson_corr_meas;
    nissa::nucleon_corr_meas_pars_t *nucleon_corr_meas;
    nissa::magnetization_meas_pars_t *magnetization_meas;
    nissa::minmax_eigenvalues_meas_pars_t *minmax_eigenvalues_meas;
    nissa::quark_rendens_meas_pars_t *quark_rendens_meas;
    nissa::chir_zumba_meas_pars_t *chir_zumba_meas;
    nissa::spinpol_meas_pars_t *spinpol_meas;
    nissa::qed_corr_meas_pars_t *qed_corr_meas;
    nissa::fermionic_putpourri_meas_pars_t *fermionic_putpourri_meas;
    nissa::gauge_obs_meas_pars_t *plaq_pol_meas;
    nissa::top_meas_pars_t *top_meas;
    nissa::poly_corr_meas_pars_t *luppoli_meas;
    nissa::watusso_meas_pars_t *watusso_meas;
    nissa::all_rects_meas_pars_t *all_rects_meas;
    nissa::spectr_proj_meas_pars_t *spectr_proj_meas;
    nissa::tm_tuning_meas_pars_t *tm_tuning_meas;
    nissa::ellesettete_meas_pars_t *ellesettete_meas;
    
    nissa::rnd_t rnd_type;
    nissa::GAMMA_INT gamma_int;
    
    std::vector<int> *int_list;
    std::vector<double> *double_list;
    std::vector<std::string> *text_list;
    std::pair<int,int> *int_pair;
    std::vector<std::pair<int,int> > *int_pair_list;
}

%token TK_INVALID_STRING
%token TK_INVALID_CHAR
//arithmethc
%token <double_numb> TK_DOUBLE
%type <double_numb> double_numb
%token <int_numb> TK_INT
%token <int_numb> TK_QUANTITY
%type <int_numb> int_numb
%left TK_MINUS TK_PLUS
%left TK_TIMES TK_DIV
%precedence NEG
%right TK_POW

//geometry
%token TK_GEOMETRY
%token TK_LX
%token TK_LY
%token TK_LZ
%token TK_L
%token TK_T
//tag for the run
%token TK_TAG
//theory
%token TK_THEORY
%type <theory> theory
//gauge pars
%token TK_GAUGE_PARS
%token TK_BETA
//general pars
%type <int_pair> int_pair
%type <int_list> int_list
%type <int_list> internal_int_list
%type <double_list> double_list
%type <double_list> internal_double_list
%type <int_pair_list> int_pair_list
%type <int_pair_list> internal_int_pair_list
%token <text> TK_QUOTED_TEXT
%type <text> text
%type <text_list> text_list
%type <text_list> internal_text_list
//each
%token TK_EACH
%token TK_MEAS_EACH_NSMOOTH
%type <double_numb> each meas_each_nsmooth
//after
%token <int_numb> TK_AFTER
%type <int_numb> after
//yes no none
%token TK_NONE TK_YES TK_NO
//residue
%token <double_numb> TK_RESIDUE
%type <double_numb> residue
//metadynamics
%token TK_META
%token TK_ORDINARY
%token TK_TOPO_POTENTIAL
%type<topotential_pars> topo_potential_pars
%token TK_THETA
%token TK_COEFF
%token TK_WIDTH
%token TK_BARR
%token TK_FORCE_OUT
%token TK_WELL_TEMPERING
%token TK_BEND
//path
%token TK_PATH
%type <text> path
//meta commands
%token TK_META_PRINT_SCANNED_INPUT
%token TK_META_PRINT_FULL_INPUT
%token TK_META_PRINT
//quark content
%token TK_QUARK
%type <quark> quark
%token TK_DEGENERACY
%token TK_DISCRETIZ
%token TK_ROOT_STAG
%token TK_OVERLAP
%token TK_ROOT_TM_CLOV
%token TK_KAPPA
%token TK_CSW
%token TK_MASS
%token TK_MASS_OVERLAP
%token TK_RE_POT_CH
%token TK_IM_POT_CH
%token TK_ELEC_CHARGE
;//smooth method
%token TK_SMOOTH_METHOD
%token TK_SPACE_OR_TIME
%token TK_SPACE
%token TK_TIME
%token TK_SPACETIME
%type <smooth_pars> smooth_pars
//topo measure
%token TK_MEAS_CORR
%token TK_CORR_PATH
//noise type
%token TK_NOISE_TYPE
%token <rnd_type> TK_RND_T
%type <rnd_type> noise_type
//stout pars
%token TK_STOUT
%type <stout_pars> stout_pars
%token TK_NLEVELS
%type <int_numb> nlevels
%token TK_RHO
%type <double_numb> rho
//cooling pars
%token TK_COOLING
%type <cool_pars> cool_pars
%token TK_NSTEPS
%type <int_numb> nsteps
//ape pars
%token TK_APE
%type <ape_pars> ape_pars
%token TK_ALPHA
%type <double_numb> alpha
//hyp pars
%token TK_HYP
%type <hyp_pars> hyp_pars
%token TK_ALPHAS
%type <double_list> alphas
//Wflow pars
%token TK_WFLOW
%type <Wflow_pars> Wflow_pars
%token TK_NFLOWS
%type <int_numb> nflows
%token TK_NRECU
%type <int_numb> nrecu
%token TK_FLOW_STEP
%type <double_numb> flow_step
//gauge action
%token TK_GAUGE_ACTION
%token TK_WILSON
%token TK_TLSYM
%token TK_IWASAKI
%type <gauge_action_name> gauge_action
//background field
%token TK_BKGRD_EM_FIELD
%type <em_field_pars> em_field_pars
%token <int_numb> TK_B_COMP
%token <int_numb> TK_E_COMP
//index of theory, number of copies and hits
%token TK_ITHEORY TK_NCOPIES TK_NHITS
%type <int_numb> itheory ncopies nhits
//meson corr
%type <meson_corr_meas> meson_corr_meas
%token TK_MEAS_MESON_CORRS
%token TK_OPERATORS
%type <int_pair_list> operators
//nucleon corr
%type <nucleon_corr_meas> nucleon_corr_meas
%token TK_MEAS_NUCLEON_CORRS
%token TK_GAUSS_SME_NSTEPS
%token TK_GAUSS_SME_KAPPA
%token TK_APE_SME_NSTEPS
%token TK_APE_SME_ALPHA
//putpourri
%type <fermionic_putpourri_meas> fermionic_putpourri_meas
%token TK_MEAS_PUTPOURRI
%token TK_COMPUTE_SUSC
%token TK_MAX_ORDER
%type <int_numb> compute_susc max_order
//rendens
%type <quark_rendens_meas> quark_rendens_meas
%token TK_MEAS_RENDENS
//zumba
%type <chir_zumba_meas> chir_zumba_meas
%token TK_MEAS_ZUMBA
//spinpol
%type <spinpol_meas> spinpol_meas
%token TK_MEAS_SPINPOL
%type <int_numb> use_ferm_conf_for_gluons use_adjoint_flow
%token TK_USE_FERM_CONF_FOR_GLUONS
%token TK_USE_ADJOINT_FLOW
//qed corr
%type <qed_corr_meas> qed_corr_meas
%token TK_MEAS_QED_CORRS
//magnetization
%type <magnetization_meas> magnetization_meas
%token TK_MEAS_MAGNETIZ
//minmax_eigenvalues
%type <minmax_eigenvalues_meas> minmax_eigenvalues_meas
%token TK_MEAS_MIN_MAX_EIGENVAL
%type <int_numb> min_max
%token TK_MIN_MAX
//spectral proj meas
%type <spectr_proj_meas> spectr_proj_meas
%token TK_SPECTR_PROJ
%token TK_NEIGS
%type <int_numb> neigs
%token TK_EIG_PRECISION
%type <double_numb> eig_precision
%token TK_WSPACE_SIZE
%type <int_numb> wspace_size
//tm tuning meas
%type <tm_tuning_meas> tm_tuning_meas
%token TK_TM_TUNING
//ellesettete
%type <ellesettete_meas> ellesettete_meas
%token TK_MEAS_ELLESETTETE
%token TK_METHOD
%token TK_NUMERICAL
%token TK_ANALYTICAL
%type <double_numb> epsilon
%token TK_EPSILON
//taste channel
%token TK_TASTE_CHANNEL
%token TK_GAMMA_ID TK_GAMMA_5 TK_GAMMA_1 TK_GAMMA_2 TK_GAMMA_3
%token TK_AX_1 TK_AX_2 TK_AX_3
%token TK_SIGMA_0_1 TK_SIGMA_0_2 TK_SIGMA_1_2 TK_SIGMA_0_3 TK_SIGMA_1_3 TK_SIGMA_2_3
%type <gamma_int> gamma taste_channel
//gauge measures
%token TK_USE_SMOOTH
%token TK_MEAS_PLAQ_POL
%token TK_MEAS_PLAQ
%token TK_MEAS_ENERGY
%token TK_MEAS_POLY
%token TK_MEAS_TOP
%token TK_MEAS_LUPPOLI
%token TK_MEAS_WATUSSO
%token TK_MEAS_ALL_RECTS
%type <plaq_pol_meas> plaq_pol_meas
%type <top_meas> top_meas
%type <luppoli_meas> luppoli_meas
%type <watusso_meas> watusso_meas
%type <all_rects_meas> all_rects_meas
//rectangle meas
%token TK_SPATIAL
%token TK_TEMPORAL
%token TK_DMIN
%token TK_DMAX
%token TK_TMIN
%token TK_TMAX
//evolution parameters
%token TK_EVOLUTION
%token TK_FORCE_UNQUENCHED
%token TK_QUENCHED_EVOLUTION
%token TK_ID_SEA_THEORY
%token TK_NTRAJ_TOT
%token TK_SKIP_METRO
%token TK_TRAJ_LENGTH
%token TK_ACT_RESIDUE
%token TK_MD_RESIDUE
%token TK_NSUBSTEPS
%token TK_NPSEUDO_FERMS
%token TK_NAUX_FIELDS
%token TK_NHB_HITS
%token TK_NHB_SWEEPS
%token TK_NOV_HITS
%token TK_NOV_SWEEPS
%token TK_USE_FACC
%token TK_USE_HMC
//gauge conf parameters
%token TK_GAUGE_CONF
%token TK_STORE_PATH
%token TK_STORE_EACH
%token TK_STORE_RUNNING
%token TK_START_COND
%token TK_HOT
%token TK_COLD
//gauge conf list
%token TK_ANALYSIS
%token TK_CONF_LIST
//run pars
%token TK_RUN
%token TK_WALLTIME
%token TK_SEED
%%

commands:
        | commands command
        | command
;

command: global_specify
       | meta_command
;

global_specify: geometry
////////////////////// tag ////////////////////////
              | TK_TAG '=' text {driver->tag=(*$3);delete $3;}
////////////////// new theory /////////////////////
              | theory {driver->theories.push_back(*$1);delete $1;}
/////////////// fermionic measures ////////////////
              | meson_corr_meas {driver->add_meson_corr_meas(*$1);delete $1;}
              | nucleon_corr_meas {driver->add_nucleon_corr_meas(*$1);delete $1;}
              | fermionic_putpourri_meas {driver->add_fermionic_putpourri_meas(*$1);delete $1;}
              | quark_rendens_meas {driver->add_quark_rendens_meas(*$1);delete $1;}
              | chir_zumba_meas {driver->add_chir_zumba_meas(*$1);delete $1;}
              | spinpol_meas {driver->add_spinpol_meas(*$1);delete $1;}
              | qed_corr_meas {driver->add_qed_corr_meas(*$1);delete $1;}
              | magnetization_meas {driver->add_magnetization_meas(*$1);delete $1;}
              | minmax_eigenvalues_meas {driver->add_minmax_eigenvalues_meas(*$1);delete $1;}
              | ellesettete_meas {driver->add_ellesettete_meas(*$1);delete $1;}
/////////////// gauge measures ////////////////////
              | plaq_pol_meas {driver->add_plaq_pol_meas(*$1);delete $1;}
              | top_meas {driver->add_top_meas(*$1);delete $1;}
              | spectr_proj_meas {driver->add_spectr_proj_meas(*$1);delete $1;}
              | tm_tuning_meas {driver->add_tm_tuning_meas(*$1);delete $1;}
              | luppoli_meas {driver->add_luppoli_meas(*$1);delete $1;}
              | watusso_meas {driver->add_watusso_meas(*$1);delete $1;}
              | all_rects_meas {driver->add_all_rects_meas(*$1);delete $1;}
/////////////// evolve and confpars /////////////////
              | TK_FORCE_UNQUENCHED '=' int_numb {driver->force_unquenched=$3;}
              | global_evolve_pars
              | global_quenched_evolve_pars
              | global_conf_pars
//////////////////// analysis ///////////////////////
              | global_analysis_pars
//////////////// walltime and seed /////////////////
              | run_pars
;

meta_command: TK_META_PRINT_SCANNED_INPUT '(' text ')' {FILE *fout=open_file($3->c_str(),"w");driver->master_fprintf(fout);close_file(fout);delete $3;}
            | TK_META_PRINT_FULL_INPUT '(' text ')' {FILE *fout=open_file($3->c_str(),"w");driver->master_fprintf(fout,true);close_file(fout);delete $3;}
            | TK_META_PRINT '(' text ')' {master_printf("%s",$3->c_str());delete $3;}
;

//////////////////////////////////////////////// SIMPLE STUFF //////////////////////////////////////////////////

gauge_action: TK_GAUGE_ACTION '=' TK_WILSON {$$=WILSON_GAUGE_ACTION;};
            | TK_GAUGE_ACTION '=' TK_TLSYM {$$=TLSYM_GAUGE_ACTION;};
            | TK_GAUGE_ACTION '=' TK_IWASAKI {$$=IWASAKI_GAUGE_ACTION;};

each: TK_EACH '=' int_numb {$$=$3;};

meas_each_nsmooth: TK_MEAS_EACH_NSMOOTH '=' double_numb {$$=$3;};

after: TK_AFTER '=' int_numb {$$=$3;};

residue: TK_RESIDUE '=' double_numb {$$=$3;};

itheory: TK_ITHEORY '=' int_numb {$$=$3;};

ncopies: TK_NCOPIES '=' int_numb {$$=$3;};

nhits: TK_NHITS '=' int_numb {$$=$3;};

noise_type: TK_NOISE_TYPE '=' TK_RND_T {$$=$3;};

epsilon: TK_EPSILON '=' double_numb {$$=$3;};

compute_susc: TK_COMPUTE_SUSC '=' int_numb {$$=$3;};

neigs: TK_NEIGS '=' int_numb {$$=$3;};

eig_precision: TK_EIG_PRECISION '=' double_numb {$$=$3;};

wspace_size: TK_WSPACE_SIZE '=' int_numb {$$=$3;};

min_max: TK_MIN_MAX '=' int_numb {$$=$3;};

max_order: TK_MAX_ORDER '=' int_numb {$$=$3;};

path: TK_PATH '=' text {$$=$3;};

geometry: TK_GEOMETRY
        | geometry TK_T '=' int_numb {driver->T=$4;}
        | geometry TK_L '=' int_numb {driver->LX=driver->LY=driver->LZ=$4;}
        | geometry TK_LX '=' int_numb {driver->LX=$4;}
        | geometry TK_LY '=' int_numb {driver->LY=$4;}
        | geometry TK_LZ '=' int_numb {driver->LZ=$4;}
;

gamma: TK_GAMMA_ID {$$ = GAMMA_INT::IDENTITY;}
     | TK_GAMMA_5 {$$ = GAMMA_INT::GAMMA_5;}
     | TK_GAMMA_1 {$$ = GAMMA_INT::GAMMA_1;}
     | TK_GAMMA_2 {$$ = GAMMA_INT::GAMMA_2;}
     | TK_GAMMA_3 {$$ = GAMMA_INT::GAMMA_3;}
     | TK_AX_1 {$$ = GAMMA_INT::GAMMA_5_GAMMA_1;}
     | TK_AX_2 {$$ = GAMMA_INT::GAMMA_5_GAMMA_2;}
     | TK_AX_3 {$$ = GAMMA_INT::GAMMA_5_GAMMA_3;}
     | TK_SIGMA_0_1 {$$ = GAMMA_INT::SIGMA_0_1;}
     | TK_SIGMA_0_2 {$$ = GAMMA_INT::SIGMA_0_2;}
     | TK_SIGMA_1_2 {$$ = GAMMA_INT::SIGMA_1_2;}
     | TK_SIGMA_0_3 {$$ = GAMMA_INT::SIGMA_0_3;}
     | TK_SIGMA_1_3 {$$ = GAMMA_INT::SIGMA_1_3;}
     | TK_SIGMA_2_3 {$$ = GAMMA_INT::SIGMA_2_3;}
;

taste_channel: TK_TASTE_CHANNEL '=' gamma {$$ = $3;}

///////////////////////////////////////////////// THEORY ///////////////////////////////////////////////////////

theory: TK_THEORY {$$=new theory_pars_t;}
      | theory stout_pars {$$->stout_pars=(*$2);delete $2;};
      | theory topo_potential_pars {$2->init();$$->topotential_pars=(*$2);delete $2;}
      | theory quark {$$->quarks.push_back(*$2);delete $2;}
      | theory em_field_pars {$$->em_field_pars=(*$2);delete $2;}
      | theory TK_BETA '=' double_numb {$$->beta=$4;}
      | theory gauge_action {$$->gauge_action_name=$2;}
;

///////////////////////////////////////////////////// EM FIELD /////////////////////////////////////////////////
em_field_pars: TK_BKGRD_EM_FIELD {$$=new em_field_pars_t;$$->flag=1;}
             | em_field_pars TK_E_COMP '=' double_numb {$$->E[$2]=$4;}
             | em_field_pars TK_B_COMP '=' double_numb {$$->B[$2]=$4;}
;

////////////////////////////////////////////// RUNNING PARAMETERS //////////////////////////////////////////////

run_pars: TK_RUN {}
        | run_pars TK_WALLTIME '=' int_numb {driver->walltime=$4;}
        | run_pars TK_SEED '=' int_numb {driver->seed=$4;}
;

////////////////////////////////////////////// TOPO POTENTIAL //////////////////////////////////////////////////

topo_potential_pars: TK_TOPO_POTENTIAL '=' TK_META {$$=new topotential_pars_t;$$->flag=2;}
                   | TK_TOPO_POTENTIAL '=' TK_ORDINARY {$$=new topotential_pars_t;$$->flag=1;}
                   | TK_TOPO_POTENTIAL '=' TK_NONE {$$=new topotential_pars_t;$$->flag=0;}
                   | topo_potential_pars stout_pars {$$->stout_pars=(*$2);delete $2;};
                   | topo_potential_pars after {$$->after=$2;}
                   | topo_potential_pars each {$$->each=$2;}
                   | topo_potential_pars TK_THETA '=' double_numb {$$->theta=$4;}
                   | topo_potential_pars TK_COEFF '=' double_numb {$$->coeff=$4;}
                   | topo_potential_pars TK_WIDTH '=' double_numb {$$->width=$4;}
                   | topo_potential_pars TK_BARR '=' double_numb {$$->barr=$4;}
                   | topo_potential_pars TK_FORCE_OUT '=' double_numb {$$->force_out=$4;}
                   | topo_potential_pars TK_WELL_TEMPERING '=' double_numb {$$->well_tempering=$4;}
                   | topo_potential_pars TK_BEND '=' double_numb {$$->bend=$4;}
;

////////////////////////////////////////////////// SMOOTH PARS /////////////////////////////////////////////////

smooth_pars: TK_SMOOTH_METHOD '=' stout_pars {$$=new smooth_pars_t;$$->method=smooth_pars_t::STOUT;$$->stout=(*$3);delete $3;}
           | TK_SMOOTH_METHOD '=' cool_pars {$$=new smooth_pars_t;$$->method=smooth_pars_t::COOLING;$$->cool=(*$3);delete $3;}
           | TK_SMOOTH_METHOD '=' Wflow_pars {$$=new smooth_pars_t;$$->method=smooth_pars_t::WFLOW;$$->Wflow=(*$3);delete $3;}
           | TK_SMOOTH_METHOD '=' ape_pars {$$=new smooth_pars_t;$$->method=smooth_pars_t::APE;$$->ape=(*$3);delete $3;}
           | TK_SMOOTH_METHOD '=' hyp_pars {$$=new smooth_pars_t;$$->method=smooth_pars_t::HYP;$$->hyp=(*$3);delete $3;}
           | smooth_pars meas_each_nsmooth {$1->meas_each_nsmooth=$2;}
           | smooth_pars TK_SPACE_OR_TIME '=' TK_SPACE {$$->space_or_time=smooth_pars_t::SPACE;}
           | smooth_pars TK_SPACE_OR_TIME '=' TK_TIME {$$->space_or_time=smooth_pars_t::TIME;}
           | smooth_pars TK_SPACE_OR_TIME '=' TK_SPACETIME {$$->space_or_time=smooth_pars_t::SPACETIME;}
;

////////////////////////////////////////////////// STOUT PARS //////////////////////////////////////////////////

stout_pars: TK_STOUT {$$=new stout_pars_t;}
          | stout_pars nlevels {$$=$1;$$->nlevels=$2;}
          | stout_pars rho {$$=$1;$$->rho=$2;}
;

nlevels: TK_NLEVELS '=' int_numb {$$=$3;};
rho: TK_RHO '=' double_numb {$$=$3;};

////////////////////////////////////////////////// COOL PARS //////////////////////////////////////////////////

cool_pars: TK_COOLING {$$=new cool_pars_t;}
         | cool_pars nsteps {$$=$1;$$->nsteps=$2;}
         | cool_pars gauge_action {$$=$1;$$->gauge_action=$2;}
;

nsteps: TK_NSTEPS '=' int_numb {$$=$3;};

////////////////////////////////////////////////// APE PARS //////////////////////////////////////////////////

ape_pars: TK_APE {$$=new ape_pars_t;}
        | ape_pars nlevels {$$=$1;$$->nlevels=$2;}
        | ape_pars alpha {$$=$1;$$->alpha=$2;}
;

alpha: TK_ALPHA '=' double_numb {$$=$3;};

////////////////////////////////////////////////// HYP PARS //////////////////////////////////////////////////

hyp_pars: TK_HYP {$$=new hyp_pars_t;}
        | hyp_pars nlevels {$$=$1;$$->nlevels=$2;}
        | hyp_pars alphas {
	    $$=$1;
	    if($2->size()!=3) crash("hyp alpha needs an exactly 3 long list of int");
	    $$->alpha0=(*$2)[0];
	    $$->alpha1=(*$2)[1];
	    $$->alpha2=(*$2)[2];
	    delete $2;
	    }
;

alphas: TK_ALPHAS '=' double_list {$$=$3;};

////////////////////////////////////////////////// WFLOW PARS //////////////////////////////////////////////////

Wflow_pars: TK_WFLOW {$$=new Wflow_pars_t;}
          | Wflow_pars nflows {$$=$1;$$->nflows=$2;}
          | Wflow_pars nrecu {$$=$1;$$->nrecu=$2;}
          | Wflow_pars flow_step {$$=$1;$$->dt=$2;}
;

nflows: TK_NFLOWS '=' int_numb {$$=$3;};
nrecu: TK_NRECU '=' int_numb {$$=$3;};
flow_step: TK_FLOW_STEP '=' double_numb {$$=$3;};

////////////////////////////////////////////////// QUARK CONTENT //////////////////////////////////////////////////

quark: TK_QUARK '=' text
     {
	 $$=new quark_content_t();
	 $$->name=(*$3);
	 delete $3;
     }
     | quark TK_DEGENERACY '=' int_numb {$$->deg=$4;}
     | quark TK_DISCRETIZ '=' TK_ROOT_STAG {$$->discretiz=nissa::ferm_discretiz::ROOT_STAG;}
     | quark TK_DISCRETIZ '=' TK_ROOT_TM_CLOV {$$->discretiz=nissa::ferm_discretiz::ROOT_TM_CLOV;}
     | quark TK_DISCRETIZ '=' TK_OVERLAP {$$->discretiz=nissa::ferm_discretiz::OVERLAP;}
     | quark TK_MASS '=' double_numb {$$->mass=$4;}
     | quark TK_MASS_OVERLAP '=' double_numb {$$->mass_overlap=$4;}
     | quark TK_KAPPA '=' double_numb{$$->kappa=$4;}
     | quark TK_CSW '=' double_numb{$$->cSW=$4;}
     | quark TK_RE_POT_CH '=' double_numb {$$->re_pot=$4;}
     | quark TK_IM_POT_CH '=' double_numb {$$->im_pot=$4;}
     | quark TK_ELEC_CHARGE '=' double_numb {$$->charge=$4;}
;

////////////////////////////////////////////////// NUCLEON CORR //////////////////////////////////////////////////

nucleon_corr_meas: TK_MEAS_NUCLEON_CORRS {$$=new nucleon_corr_meas_pars_t();}
                 | nucleon_corr_meas each {$$->each=$2;}
                 | nucleon_corr_meas after {$$->after=$2;}
                 | nucleon_corr_meas path {$$->path=(*$2);delete $2;}
                 | nucleon_corr_meas residue {$$->residue=$2;}
                 | nucleon_corr_meas itheory {$$->itheory=$2;}
                 | nucleon_corr_meas ncopies {$$->ncopies=$2;}
                 | nucleon_corr_meas noise_type {$$->rnd_type=$2;}
                 | nucleon_corr_meas nhits {$$->nhits=$2;}
                 | nucleon_corr_meas TK_GAUSS_SME_NSTEPS '=' int_numb {$$->gaussSmeNSteps=$4;}
                 | nucleon_corr_meas TK_GAUSS_SME_KAPPA '=' double_numb {$$->gaussSmeKappa=$4;}
                 | nucleon_corr_meas TK_APE_SME_NSTEPS '=' int_numb {$$->apeSmeNSteps=$4;}
                 | nucleon_corr_meas TK_APE_SME_ALPHA '=' double_numb {$$->apeSmeAlpha=$4;}
;

////////////////////////////////////////////////// MESON CORR //////////////////////////////////////////////////

meson_corr_meas: TK_MEAS_MESON_CORRS {$$=new meson_corr_meas_pars_t();}
               | meson_corr_meas each {$$->each=$2;}
               | meson_corr_meas after {$$->after=$2;}
               | meson_corr_meas path {$$->path=(*$2);delete $2;}
               | meson_corr_meas residue {$$->residue=$2;}
               | meson_corr_meas itheory {$$->itheory=$2;}
               | meson_corr_meas ncopies {$$->ncopies=$2;}
               | meson_corr_meas noise_type {$$->rnd_type=$2;}
               | meson_corr_meas nhits {$$->nhits=$2;}
               | meson_corr_meas operators {
		   if((*$2)[0]!=std::make_pair(15,15)) crash("first entry of the meson list must be 15,15, instead it is: %d %d",(*$2)[0].first,(*$2)[0].second);
		   $$->mesons=(*$2);delete $2;}
;

operators: TK_OPERATORS '=' int_pair_list {
    for(size_t i=0;i<$3->size();i++)
	{
	    int f=(*$3)[i].first;
	    int s=(*$3)[i].second;
	    if((f<0)||(f>15)) crash("first part of entry %zu is %d, should be in the range [0,15]",i,f);
	    if((s<0)||(s>15)) crash("second part of entry %zu is %d, should be in the range [0,15]",i,s);
	}
	$$=$3;}
;


////////////////////////////////////////////////// FERMIONIC POUTPURRI //////////////////////////////////////////////////

fermionic_putpourri_meas: TK_MEAS_PUTPOURRI {$$=new fermionic_putpourri_meas_pars_t();}
                        | fermionic_putpourri_meas each {$$->each=$2;}
                        | fermionic_putpourri_meas after {$$->after=$2;}
                        | fermionic_putpourri_meas path {$$->path=(*$2);delete $2;}
                        | fermionic_putpourri_meas residue {$$->residue=$2;}
                        | fermionic_putpourri_meas compute_susc {$$->compute_susc=$2;}
                        | fermionic_putpourri_meas itheory {$$->itheory=$2;}
                        | fermionic_putpourri_meas ncopies {$$->ncopies=$2;}
                        | fermionic_putpourri_meas noise_type {$$->rnd_type=$2;}
                        | fermionic_putpourri_meas nhits {$$->nhits=$2;}
;

////////////////////////////////////////////////// RENDENS //////////////////////////////////////////////////

quark_rendens_meas: TK_MEAS_RENDENS {$$=new quark_rendens_meas_pars_t();}
                  | quark_rendens_meas each {$$->each=$2;}
                  | quark_rendens_meas after {$$->after=$2;}
                  | quark_rendens_meas path {$$->path=(*$2);delete $2;}
                  | quark_rendens_meas residue {$$->residue=$2;}
                  | quark_rendens_meas itheory {$$->itheory=$2;}
                  | quark_rendens_meas ncopies {$$->ncopies=$2;}
                  | quark_rendens_meas noise_type {$$->rnd_type=$2;}
                  | quark_rendens_meas nhits {$$->nhits=$2;}
                  | quark_rendens_meas max_order {$$->max_order=$2;}
;

////////////////////////////////////////////////// ZUMBA //////////////////////////////////////////////////

chir_zumba_meas: TK_MEAS_ZUMBA {$$=new chir_zumba_meas_pars_t();}
                  | chir_zumba_meas each {$$->each=$2;}
                  | chir_zumba_meas after {$$->after=$2;}
                  | chir_zumba_meas path {$$->path=(*$2);delete $2;}
                  | chir_zumba_meas residue {$$->residue=$2;}
                  | chir_zumba_meas itheory {$$->itheory=$2;}
                  | chir_zumba_meas ncopies {$$->ncopies=$2;}
                  | chir_zumba_meas noise_type {$$->rnd_type=$2;}
                  | chir_zumba_meas nhits {$$->nhits=$2;}
                  | chir_zumba_meas max_order {$$->max_order=$2;}
;

////////////////////////////////////////////////// SPINPOL //////////////////////////////////////////////////

spinpol_meas: TK_MEAS_SPINPOL {$$=new spinpol_meas_pars_t();}
                  | spinpol_meas each {$$->each=$2;}
                  | spinpol_meas after {$$->after=$2;}
                  | spinpol_meas path {$$->path=(*$2);delete $2;}
                  | spinpol_meas residue {$$->residue=$2;}
                  | spinpol_meas itheory {$$->itheory=$2;}
                  | spinpol_meas ncopies {$$->ncopies=$2;}
                  | spinpol_meas noise_type {$$->rnd_type=$2;}
                  | spinpol_meas nhits {$$->nhits=$2;}
                  | spinpol_meas operators {$$->operators=*$2;delete $2;}
                  | spinpol_meas use_ferm_conf_for_gluons {$$->use_ferm_conf_for_gluons=$2;}
                  | spinpol_meas use_adjoint_flow {$$->use_adjoint_flow=$2;}
                  | spinpol_meas smooth_pars {$$->smooth_pars=(*$2);delete $2;}
;

use_ferm_conf_for_gluons: TK_USE_FERM_CONF_FOR_GLUONS '=' int_numb {$$=$3;};
use_adjoint_flow: TK_USE_ADJOINT_FLOW '=' int_numb {$$=$3;};

////////////////////////////////////////////////// QED CORR //////////////////////////////////////////////////

qed_corr_meas: TK_MEAS_QED_CORRS {$$=new qed_corr_meas_pars_t();}
                  | qed_corr_meas each {$$->each=$2;}
                  | qed_corr_meas after {$$->after=$2;}
                  | qed_corr_meas path {$$->path=(*$2);delete $2;}
                  | qed_corr_meas residue {$$->residue=$2;}
                  | qed_corr_meas itheory {$$->itheory=$2;}
                  | qed_corr_meas ncopies {$$->ncopies=$2;}
                  | qed_corr_meas noise_type {$$->rnd_type=$2;}
                  | qed_corr_meas nhits {$$->nhits=$2;}
;

////////////////////////////////////////////////// MAGNETIZATION //////////////////////////////////////////////////

magnetization_meas: TK_MEAS_MAGNETIZ {$$=new magnetization_meas_pars_t();}
                  | magnetization_meas each {$$->each=$2;}
                  | magnetization_meas after {$$->after=$2;}
                  | magnetization_meas path {$$->path=(*$2);delete $2;}
                  | magnetization_meas residue {$$->residue=$2;}
                  | magnetization_meas itheory {$$->itheory=$2;}
                  | magnetization_meas ncopies {$$->ncopies=$2;}
                  | magnetization_meas noise_type {$$->rnd_type=$2;}
                  | magnetization_meas nhits {$$->nhits=$2;}
;

////////////////////////////////////////////////// MINMAX_EIGENVALUES //////////////////////////////////////////////////

minmax_eigenvalues_meas: TK_MEAS_MIN_MAX_EIGENVAL {$$=new minmax_eigenvalues_meas_pars_t();}
                       | minmax_eigenvalues_meas each {$$->each=$2;}
                       | minmax_eigenvalues_meas after {$$->after=$2;}
                       | minmax_eigenvalues_meas path {$$->path=(*$2);delete $2;}
                       | minmax_eigenvalues_meas residue {$$->residue=$2;}
                       | minmax_eigenvalues_meas itheory {$$->itheory=$2;}
                       | minmax_eigenvalues_meas ncopies {$$->ncopies=$2;}
                       | minmax_eigenvalues_meas noise_type {$$->rnd_type=$2;}
                       | minmax_eigenvalues_meas nhits {$$->nhits=$2;}
                       | minmax_eigenvalues_meas neigs {$$->neigs=$2;}
                       | minmax_eigenvalues_meas wspace_size {$$->wspace_size=$2;}
                       | minmax_eigenvalues_meas min_max {$$->min_max=$2;}
                       | minmax_eigenvalues_meas smooth_pars {$$->smooth_pars=(*$2);delete $2;}
;

////////////////////////////////////////////////// EVOLUTION //////////////////////////////////////////////////

global_evolve_pars: TK_EVOLUTION {driver->run_mode=driver_t::EVOLUTION_MODE;}
                  | global_evolve_pars TK_NTRAJ_TOT '=' int_numb {driver->hmc_evol_pars.ntraj_tot=$4;}
                  | global_evolve_pars TK_ID_SEA_THEORY '=' int_numb {driver->hmc_evol_pars.id_sea_theory=$4;}
                  | global_evolve_pars TK_SKIP_METRO '=' int_numb {driver->hmc_evol_pars.skip_mtest_ntraj=$4;}
                  | global_evolve_pars TK_TRAJ_LENGTH '=' double_numb {driver->hmc_evol_pars.traj_length=$4;}
                  | global_evolve_pars TK_ACT_RESIDUE '=' double_numb {driver->hmc_evol_pars.pf_action_residue=$4;}
                  | global_evolve_pars TK_MD_RESIDUE '=' double_numb {driver->hmc_evol_pars.md_residue=$4;}
                  | global_evolve_pars TK_NSTEPS '=' int_numb {driver->hmc_evol_pars.nmd_steps=$4;}
                  | global_evolve_pars TK_NSUBSTEPS '=' int_numb {driver->hmc_evol_pars.ngauge_substeps=$4;}
                  | global_evolve_pars TK_NPSEUDO_FERMS '=' int_list {driver->hmc_evol_pars.npseudo_fs=(*$4);delete $4;}
;

global_quenched_evolve_pars: TK_QUENCHED_EVOLUTION {driver->run_mode=driver_t::EVOLUTION_MODE;}
                  | global_quenched_evolve_pars TK_USE_HMC '=' int_numb {if($4) crash("not implemented");driver->quenched_evol_pars.use_hmc=$4;}
                  | global_quenched_evolve_pars TK_TRAJ_LENGTH '=' double_numb {driver->quenched_evol_pars.traj_length=$4;}
                  | global_quenched_evolve_pars TK_SKIP_METRO '=' int_numb {driver->quenched_evol_pars.skip_mtest_ntraj=$4;}
                  | global_quenched_evolve_pars TK_NSTEPS '=' int_numb {driver->quenched_evol_pars.nmd_steps=$4;}
                  | global_quenched_evolve_pars TK_USE_FACC '=' int_numb {driver->quenched_evol_pars.use_facc=$4;}
                  | global_quenched_evolve_pars TK_KAPPA '=' double_numb {driver->quenched_evol_pars.kappa=$4;}
                  | global_quenched_evolve_pars TK_RESIDUE '=' double_numb {driver->quenched_evol_pars.residue=$4;}
                  | global_quenched_evolve_pars TK_NAUX_FIELDS '=' int_numb {driver->quenched_evol_pars.naux_fields=$4;}
                  | global_quenched_evolve_pars TK_NHB_SWEEPS '=' int_numb {driver->quenched_evol_pars.nhb_sweeps=$4;}
                  | global_quenched_evolve_pars TK_NHB_HITS '=' int_numb {driver->quenched_evol_pars.nhb_hits=$4;}
                  | global_quenched_evolve_pars TK_NOV_SWEEPS '=' int_numb {driver->quenched_evol_pars.nov_sweeps=$4;}
                  | global_quenched_evolve_pars TK_NOV_HITS '=' int_numb {driver->quenched_evol_pars.nov_hits=$4;}

;

////////////////////////////////////////////////// CONF PARS ///////////////////////////////////////////////////

global_conf_pars: TK_GAUGE_CONF {driver->run_mode=driver_t::EVOLUTION_MODE;}
                | global_conf_pars path {driver->conf_pars.path=(*$2);delete $2;}
                | global_conf_pars TK_STORE_PATH '=' text
                    {
                        driver->conf_pars.store_path=(*$4);
                        char test1[128];
                        char test2[128];
                        snprintf(test1,128,$4->c_str(),100);
                        snprintf(test2,128,$4->c_str(),101);
                        if(!strcmp(test1,test2)) crash("bad template \"%s\" for store_path",$4->c_str());
			delete $4;
		    }
                | global_conf_pars TK_STORE_EACH '=' int_numb {driver->conf_pars.store_each=$4;}
                | global_conf_pars TK_STORE_RUNNING '=' int_numb {driver->conf_pars.store_running=$4;}
                | global_conf_pars TK_START_COND '=' TK_HOT {driver->conf_pars.start_cond=HOT_START_COND;}
                | global_conf_pars TK_START_COND '=' TK_COLD {driver->conf_pars.start_cond=COLD_START_COND;}
;

////////////////////////////////////////////////// SPECTRAL PROJECTORS //////////////////////////////////////////////////

spectr_proj_meas: TK_SPECTR_PROJ {$$=new spectr_proj_meas_pars_t();}
                | spectr_proj_meas each {$$->each=$2;}
                | spectr_proj_meas after {$$->after=$2;}
                | spectr_proj_meas path {$$->path=(*$2);delete $2;}
                | spectr_proj_meas residue {$$->residue=$2;}
                | spectr_proj_meas itheory {$$->itheory=$2;}
                | spectr_proj_meas ncopies {$$->ncopies=$2;}
                | spectr_proj_meas noise_type {$$->rnd_type=$2;}
                | spectr_proj_meas nhits {$$->nhits=$2;}
                | spectr_proj_meas neigs {$$->neigs=$2;}
                | spectr_proj_meas eig_precision {$$->eig_precision=$2;}
                | spectr_proj_meas wspace_size {$$->wspace_size=$2;}
                | spectr_proj_meas smooth_pars {$$->smooth_pars=(*$2);delete $2;}
;

////////////////////////////////////////////////// TM TUNING //////////////////////////////////////////////////

tm_tuning_meas: TK_TM_TUNING {$$=new tm_tuning_meas_pars_t();}
                | tm_tuning_meas each {$$->each=$2;}
                | tm_tuning_meas after {$$->after=$2;}
                | tm_tuning_meas path {$$->path=(*$2);delete $2;}
                | tm_tuning_meas residue {$$->residue=$2;}
                | tm_tuning_meas itheory {$$->itheory=$2;}
                | tm_tuning_meas ncopies {$$->ncopies=$2;}
                | tm_tuning_meas noise_type {$$->rnd_type=$2;}
                | tm_tuning_meas nhits {$$->nhits=$2;}
;

////////////////////////////////////////////////// ELLESETTETE //////////////////////////////////////////////////

ellesettete_meas: TK_MEAS_ELLESETTETE {$$=new ellesettete_meas_pars_t();}
                  | ellesettete_meas each {$$->each=$2;}
                  | ellesettete_meas after {$$->after=$2;}
                  | ellesettete_meas path {$$->path=(*$2);delete $2;}
                  | ellesettete_meas residue {$$->residue=$2;}
                  | ellesettete_meas itheory {$$->itheory=$2;}
                  | ellesettete_meas ncopies {$$->ncopies=$2;}
                  | ellesettete_meas noise_type {$$->rnd_type=$2;}
                  | ellesettete_meas nhits {$$->nhits=$2;}
                  | ellesettete_meas max_order {$$->max_order=$2;}
                  | ellesettete_meas TK_METHOD TK_ANALYTICAL {$$->method=ellesettete_meas_pars_t::ANALYTICAL;}
                  | ellesettete_meas TK_METHOD TK_NUMERICAL {$$->method=ellesettete_meas_pars_t::NUMERICAL;}
                  | ellesettete_meas epsilon {$$->epsilon=$2;}
                  | ellesettete_meas taste_channel {$$->taste_channel=$2;}
;

////////////////////////////////////////////////// ANALYSIS //////////////////////////////////////////////////

global_analysis_pars: TK_ANALYSIS TK_CONF_LIST '=' text_list
{
    driver->run_mode=driver_t::ANALYSIS_MODE;
    for(auto& it : *$4)
	{
	    glob_t globbuf;
	    if(glob(it.c_str(),0,NULL,&globbuf))
		crash("Unable to find pattern %s for conf",it.c_str());
	    else
		for(int j=0;j<(int)globbuf.gl_pathc;j++)
		    driver->an_conf_list.push_back(globbuf.gl_pathv[j]);
	    globfree(&globbuf);
	 }
     delete $4;
 }
;

/////////////////////////////////////////// PLAQ AND POLYAKOV LOOP //////////////////////////////////////////////////

plaq_pol_meas: TK_MEAS_PLAQ_POL {$$=new gauge_obs_meas_pars_t();}
             | plaq_pol_meas each {$$->each=$2;}
             | plaq_pol_meas after {$$->after=$2;}
             | plaq_pol_meas path {$$->path=(*$2);delete $2;}
             | plaq_pol_meas TK_USE_SMOOTH '=' int_numb {$$->use_smooth=$4;}
             | plaq_pol_meas TK_MEAS_PLAQ '=' int_numb {$$->meas_plaq=$4;}
             | plaq_pol_meas TK_MEAS_ENERGY '=' int_numb {$$->meas_energy=$4;}
             | plaq_pol_meas TK_MEAS_POLY '=' int_numb {$$->meas_poly=$4;}
             | plaq_pol_meas smooth_pars {$$->smooth_pars=(*$2);delete $2;}
;

//////////////////////////////////////////////// TOPO CHARGE ////////////////////////////////////////////////////////

top_meas: TK_MEAS_TOP {$$=new top_meas_pars_t();}
        | top_meas each {$$->each=$2;}
        | top_meas after {$$->after=$2;}
        | top_meas path {$$->path=(*$2);delete $2;}
        | top_meas smooth_pars {$$->smooth_pars=(*$2);delete $2;}
        | top_meas TK_MEAS_CORR '=' int_numb {$$->meas_corr=$4;}
        | top_meas TK_CORR_PATH '=' text  {$$->corr_path=(*$4);}
;

//////////////////////////////////////////// POLYAKOV LOOP CORRELATORS /////////////////////////////////////////////

luppoli_meas: TK_MEAS_LUPPOLI {$$=new poly_corr_meas_pars_t();}
            | luppoli_meas each {$$->each=$2;}
            | luppoli_meas after {$$->after=$2;}
            | luppoli_meas path {$$->path=(*$2);delete $2;}
;

/////////////////////////////////////////////////////// WATUSSO /////////////////////////////////////////////////////

watusso_meas: TK_MEAS_WATUSSO {$$=new watusso_meas_pars_t();}
            | watusso_meas each {$$->each=$2;}
            | watusso_meas after {$$->after=$2;}
            | watusso_meas TK_SPATIAL smooth_pars {$$->spat_smear_pars=(*$3);delete $3;}
            | watusso_meas TK_TEMPORAL smooth_pars {$$->temp_smear_pars=(*$3);delete $3;}
            | watusso_meas path {$$->path=(*$2);delete $2;}
;

/////////////////////////////////////////// RECTANGLES OF VARIOUS SIZE /////////////////////////////////////////////

all_rects_meas: TK_MEAS_ALL_RECTS {$$=new all_rects_meas_pars_t();}
              | all_rects_meas each {$$->each=$2;}
              | all_rects_meas after {$$->after=$2;}
              | all_rects_meas TK_DMIN '=' int_numb {$$->Dmin=$4;}
              | all_rects_meas TK_DMAX '=' int_numb {$$->Dmax=$4;}
              | all_rects_meas TK_TMIN '=' int_numb {$$->Tmin=$4;}
              | all_rects_meas TK_TMAX '=' int_numb {$$->Tmax=$4;}
              | all_rects_meas TK_SPATIAL smooth_pars {$$->spat_smear_pars=(*$3);delete $3;}
              | all_rects_meas TK_TEMPORAL smooth_pars {$$->temp_smear_pars=(*$3);delete $3;}
              | all_rects_meas path {$$->path=(*$2);delete $2;}
;

/////////////////////////////////////////////// LIST OF INTEGERS ///////////////////////////////////////////////////

int_list: internal_int_list '}' {$$=$1;}
;

internal_int_list: '{' int_numb {$$=new std::vector<int>;$$->push_back($2);}
                 | internal_int_list ',' int_numb {$$->push_back($3);}
;

/////////////////////////////////////////////// LIST OF DOUBLE ///////////////////////////////////////////////////

double_list: internal_double_list '}' {$$=$1;}
;

internal_double_list: '{' double_numb {$$=new std::vector<double>;$$->push_back($2);}
                    | internal_double_list ',' double_numb {$$->push_back($3);}
;

/////////////////////////////////////////////// LIST OF TEXT ///////////////////////////////////////////////////

text_list: internal_text_list '}' {$$=$1;}
;

internal_text_list: '{' text {$$=new std::vector<std::string>;$$->push_back(*$2);delete $2;}
                    | internal_text_list ',' text {$$->push_back(*$3);delete $3;}
;

/////////////////////////////////////////// LIST OF PAIR OF INTEGERS ///////////////////////////////////////////////

int_pair_list: internal_int_pair_list '}' {$$=$1;}
;

internal_int_pair_list: '{' int_pair {$$=new std::vector<std::pair<int,int> >;$$->push_back(*$2);delete $2;}
                      | internal_int_pair_list ',' int_pair {$$->push_back(*$3);delete $3;}
;

/////////////////////////////////////////////// PAIR OF INTEGERS ///////////////////////////////////////////////////

int_pair: '(' int_numb ',' int_numb ')' {$$=new std::pair<int,int>; (*$$)=std::make_pair($2,$4);}
;

//////////////////////////////////////////////////// ARITHMETIC //////////////////////////////////////////////////////

//text
text: TK_QUOTED_TEXT {$$=$1;}
| text '+' text {$$=new std::string(*$1);(*$$)+=(*$3);delete $1;delete $3;}
;

//double
double_numb: TK_DOUBLE {$$=$1;}
         | int_numb {$$=$1;}
         | TK_PLUS double_numb %prec NEG {$$=$2;}
         | TK_MINUS double_numb %prec NEG {$$=-$2;}
         | double_numb TK_PLUS double_numb {$$=$1+$3;}
         | double_numb TK_MINUS double_numb {$$=$1-$3;}
         | double_numb TK_TIMES double_numb {$$=$1*$3;}
         | double_numb TK_DIV double_numb {$$=$1/$3;}
         | double_numb TK_POW double_numb {$$=pow($1,$3);}
         | '(' double_numb ')' {$$=$2;}
;

//integer
int_numb: TK_INT {$$=$1;}
        | TK_PLUS int_numb %prec NEG {$$=$2;}
        | TK_MINUS int_numb %prec NEG {$$=-$2;}
        | int_numb TK_PLUS int_numb {$$=$1+$3;}
        | int_numb TK_MINUS int_numb {$$=$1-$3;}
        | int_numb TK_QUANTITY {$$=$1*$2;}
        | int_numb TK_TIMES int_numb {$$=$1*$3;}
        | int_numb TK_DIV int_numb {$$=$1/$3;}
        | int_numb TK_POW int_numb {$$=(int)pow($1,$3);}
        | '(' int_numb ')' {$$=$2;}
;

